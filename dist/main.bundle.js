!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=48)}([function(t,e){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,e,r){var n=r(34)("wks"),o=r(21),i=r(0).Symbol,c="function"==typeof i;(t.exports=function(t){return n[t]||(n[t]=c&&i[t]||(c?i:o)("Symbol."+t))}).store=n},function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}},function(t,e,r){var n=r(6);t.exports=function(t){if(!n(t))throw TypeError(t+" is not an object!");return t}},function(t,e,r){t.exports=!r(13)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){var r=t.exports={version:"2.5.7"};"number"==typeof __e&&(__e=r)},function(t,e,r){var n=r(9),o=r(24);t.exports=r(4)?function(t,e,r){return n.f(t,e,o(1,r))}:function(t,e,r){return t[e]=r,t}},function(t,e,r){var n=r(3),o=r(35),i=r(23),c=Object.defineProperty;e.f=r(4)?Object.defineProperty:function(t,e,r){if(n(t),e=i(e,!0),n(r),o)try{return c(t,e,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[e]=r.value),t}},function(t,e){var r={}.hasOwnProperty;t.exports=function(t,e){return r.call(t,e)}},function(t,e,r){var n=r(17);t.exports=function(t,e,r){if(n(t),void 0===e)return t;switch(r){case 1:return function(r){return t.call(e,r)};case 2:return function(r,n){return t.call(e,r,n)};case 3:return function(r,n,o){return t.call(e,r,n,o)}}return function(){return t.apply(e,arguments)}}},function(t,e){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,e,r){var n=r(0),o=r(8),i=r(10),c=r(21)("src"),a=Function.toString,u=(""+a).split("toString");r(7).inspectSource=function(t){return a.call(t)},(t.exports=function(t,e,r,a){var s="function"==typeof r;s&&(i(r,"name")||o(r,"name",e)),t[e]!==r&&(s&&(i(r,c)||o(r,c,t[e]?""+t[e]:u.join(String(e)))),t===n?t[e]=r:a?t[e]?t[e]=r:o(t,e,r):(delete t[e],o(t,e,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[c]||a.call(this)})},function(t,e){t.exports={}},function(t,e,r){t.exports=r(64)},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e,r){var n=r(0),o=r(7),i=r(8),c=r(14),a=r(11),u=function(t,e,r){var s,f,l,h,p=t&u.F,y=t&u.G,d=t&u.S,v=t&u.P,m=t&u.B,g=y?n:d?n[e]||(n[e]={}):(n[e]||{}).prototype,b=y?o:o[e]||(o[e]={}),w=b.prototype||(b.prototype={});for(s in y&&(r=e),r)l=((f=!p&&g&&void 0!==g[s])?g:r)[s],h=m&&f?a(l,n):v&&"function"==typeof l?a(Function.call,l):l,g&&c(g,s,l,t&u.U),b[s]!=l&&i(b,s,h),v&&w[s]!=l&&(w[s]=l)};n.core=o,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,t.exports=u},function(t,e,r){var n=r(69),o=r(27);t.exports=function(t){return n(o(t))}},function(t,e){t.exports=!1},function(t,e){var r=0,n=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+n).toString(36))}},function(t,e,r){var n=r(6),o=r(0).document,i=n(o)&&n(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,e,r){var n=r(6);t.exports=function(t,e){if(!n(t))return t;var r,o;if(e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;if("function"==typeof(r=t.valueOf)&&!n(o=r.call(t)))return o;if(!e&&"function"==typeof(r=t.toString)&&!n(o=r.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e,r){var n=r(9).f,o=r(10),i=r(1)("toStringTag");t.exports=function(t,e,r){t&&!o(t=r?t:t.prototype,i)&&n(t,i,{configurable:!0,value:e})}},function(t,e,r){for(var n=r(42),o=r(28),i=r(14),c=r(0),a=r(8),u=r(15),s=r(1),f=s("iterator"),l=s("toStringTag"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},y=o(p),d=0;d<y.length;d++){var v,m=y[d],g=p[m],b=c[m],w=b&&b.prototype;if(w&&(w[f]||a(w,f,h),w[l]||a(w,l,m),u[m]=h,g))for(v in n)w[v]||i(w,v,n[v],!0)}},function(t,e){t.exports=function(t){if(void 0==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,r){var n=r(44),o=r(30);t.exports=Object.keys||function(t){return n(t,o)}},function(t,e,r){var n=r(34)("keys"),o=r(21);t.exports=function(t){return n[t]||(n[t]=o(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e){function r(t,e,r,n,o,i,c){try{var a=t[i](c),u=a.value}catch(t){return void r(t)}a.done?e(u):Promise.resolve(u).then(n,o)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise(function(o,i){var c=t.apply(e,n);function a(t){r(c,o,i,a,u,"next",t)}function u(t){r(c,o,i,a,u,"throw",t)}a(void 0)})}}},function(t,e,r){"use strict";var n,o,i,c,a=r(20),u=r(0),s=r(11),f=r(33),l=r(18),h=r(6),p=r(17),y=r(50),d=r(51),v=r(55),m=r(38).set,g=r(57)(),b=r(40),w=r(58),_=r(59),x=r(60),E=u.TypeError,S=u.process,L=S&&S.versions,O=L&&L.v8||"",A=u.Promise,T="process"==f(S),j=function(){},P=o=b.f,N=!!function(){try{var t=A.resolve(1),e=(t.constructor={})[r(1)("species")]=function(t){t(j,j)};return(T||"function"==typeof PromiseRejectionEvent)&&t.then(j)instanceof e&&0!==O.indexOf("6.6")&&-1===_.indexOf("Chrome/66")}catch(t){}}(),k=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},C=function(t,e){if(!t._n){t._n=!0;var r=t._c;g(function(){for(var n=t._v,o=1==t._s,i=0,c=function(e){var r,i,c,a=o?e.ok:e.fail,u=e.resolve,s=e.reject,f=e.domain;try{a?(o||(2==t._h&&F(t),t._h=1),!0===a?r=n:(f&&f.enter(),r=a(n),f&&(f.exit(),c=!0)),r===e.promise?s(E("Promise-chain cycle")):(i=k(r))?i.call(r,u,s):u(r)):s(n)}catch(t){f&&!c&&f.exit(),s(t)}};r.length>i;)c(r[i++]);t._c=[],t._n=!1,e&&!t._h&&R(t)})}},R=function(t){m.call(u,function(){var e,r,n,o=t._v,i=I(t);if(i&&(e=w(function(){T?S.emit("unhandledRejection",o,t):(r=u.onunhandledrejection)?r({promise:t,reason:o}):(n=u.console)&&n.error&&n.error("Unhandled promise rejection",o)}),t._h=T||I(t)?2:1),t._a=void 0,i&&e.e)throw e.v})},I=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){m.call(u,function(){var e;T?S.emit("rejectionHandled",t):(e=u.onrejectionhandled)&&e({promise:t,reason:t._v})})},M=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),C(e,!0))},U=function(t){var e,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw E("Promise can't be resolved itself");(e=k(t))?g(function(){var n={_w:r,_d:!1};try{e.call(t,s(U,n,1),s(M,n,1))}catch(t){M.call(n,t)}}):(r._v=t,r._s=1,C(r,!1))}catch(t){M.call({_w:r,_d:!1},t)}}};N||(A=function(t){y(this,A,"Promise","_h"),p(t),n.call(this);try{t(s(U,this,1),s(M,this,1))}catch(t){M.call(this,t)}},(n=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(61)(A.prototype,{then:function(t,e){var r=P(v(this,A));return r.ok="function"!=typeof t||t,r.fail="function"==typeof e&&e,r.domain=T?S.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&C(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new n;this.promise=t,this.resolve=s(U,t,1),this.reject=s(M,t,1)},b.f=P=function(t){return t===A||t===c?new i(t):o(t)}),l(l.G+l.W+l.F*!N,{Promise:A}),r(25)(A,"Promise"),r(62)("Promise"),c=r(7).Promise,l(l.S+l.F*!N,"Promise",{reject:function(t){var e=P(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(a||!N),"Promise",{resolve:function(t){return x(a&&this===c?A:this,t)}}),l(l.S+l.F*!(N&&r(63)(function(t){A.all(t).catch(j)})),"Promise",{all:function(t){var e=this,r=P(e),n=r.resolve,o=r.reject,i=w(function(){var r=[],i=0,c=1;d(t,!1,function(t){var a=i++,u=!1;r.push(void 0),c++,e.resolve(t).then(function(t){u||(u=!0,r[a]=t,--c||n(r))},o)}),--c||n(r)});return i.e&&o(i.v),r.promise},race:function(t){var e=this,r=P(e),n=r.reject,o=w(function(){d(t,!1,function(t){e.resolve(t).then(r.resolve,n)})});return o.e&&n(o.v),r.promise}})},function(t,e,r){var n=r(12),o=r(1)("toStringTag"),i="Arguments"==n(function(){return arguments}());t.exports=function(t){var e,r,c;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),o))?r:i?n(e):"Object"==(c=n(e))&&"function"==typeof e.callee?"Arguments":c}},function(t,e,r){var n=r(7),o=r(0),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,e){return i[t]||(i[t]=void 0!==e?e:{})})("versions",[]).push({version:n.version,mode:r(20)?"pure":"global",copyright:"© 2018 Denis Pushkarev (zloirock.ru)"})},function(t,e,r){t.exports=!r(4)&&!r(13)(function(){return 7!=Object.defineProperty(r(22)("div"),"a",{get:function(){return 7}}).a})},function(t,e,r){var n=r(37),o=Math.min;t.exports=function(t){return t>0?o(n(t),9007199254740991):0}},function(t,e){var r=Math.ceil,n=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?n:r)(t)}},function(t,e,r){var n,o,i,c=r(11),a=r(56),u=r(39),s=r(22),f=r(0),l=f.process,h=f.setImmediate,p=f.clearImmediate,y=f.MessageChannel,d=f.Dispatch,v=0,m={},g=function(){var t=+this;if(m.hasOwnProperty(t)){var e=m[t];delete m[t],e()}},b=function(t){g.call(t.data)};h&&p||(h=function(t){for(var e=[],r=1;arguments.length>r;)e.push(arguments[r++]);return m[++v]=function(){a("function"==typeof t?t:Function(t),e)},n(v),v},p=function(t){delete m[t]},"process"==r(12)(l)?n=function(t){l.nextTick(c(g,t,1))}:d&&d.now?n=function(t){d.now(c(g,t,1))}:y?(i=(o=new y).port2,o.port1.onmessage=b,n=c(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(n=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):n="onreadystatechange"in s("script")?function(t){u.appendChild(s("script")).onreadystatechange=function(){u.removeChild(this),g.call(t)}}:function(t){setTimeout(c(g,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,r){var n=r(0).document;t.exports=n&&n.documentElement},function(t,e,r){"use strict";var n=r(17);t.exports.f=function(t){return new function(t){var e,r;this.promise=new t(function(t,n){if(void 0!==e||void 0!==r)throw TypeError("Bad Promise constructor");e=t,r=n}),this.resolve=n(e),this.reject=n(r)}(t)}},function(t,e,r){var n=r(9).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||r(4)&&n(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,e,r){"use strict";var n=r(67),o=r(68),i=r(15),c=r(19);t.exports=r(70)(Array,"Array",function(t,e){this._t=c(t),this._i=0,this._k=e},function(){var t=this._t,e=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,o(1)):o(0,"keys"==e?r:"values"==e?t[r]:[r,t[r]])},"values"),i.Arguments=i.Array,n("keys"),n("values"),n("entries")},function(t,e,r){var n=r(3),o=r(72),i=r(30),c=r(29)("IE_PROTO"),a=function(){},u=function(){var t,e=r(22)("iframe"),n=i.length;for(e.style.display="none",r(39).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),u=t.F;n--;)delete u.prototype[i[n]];return u()};t.exports=Object.create||function(t,e){var r;return null!==t?(a.prototype=n(t),r=new a,a.prototype=null,r[c]=t):r=u(),void 0===e?r:o(r,e)}},function(t,e,r){var n=r(10),o=r(19),i=r(73)(!1),c=r(29)("IE_PROTO");t.exports=function(t,e){var r,a=o(t),u=0,s=[];for(r in a)r!=c&&n(a,r)&&s.push(r);for(;e.length>u;)n(a,r=e[u++])&&(~i(s,r)||s.push(r));return s}},function(t,e,r){var n=r(27);t.exports=function(t){return Object(n(t))}},function(t,e,r){var n=r(81),o=r(24),i=r(19),c=r(23),a=r(10),u=r(35),s=Object.getOwnPropertyDescriptor;e.f=r(4)?s:function(t,e){if(t=i(t),e=c(e,!0),u)try{return s(t,e)}catch(t){}if(a(t,e))return o(!n.f.call(t,e),t[e])}},function(t,e){t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},function(t,e,r){r(49),t.exports=r(85)},function(t,e,r){"use strict";r.r(e),r.d(e,"Headers",function(){return s}),r.d(e,"Request",function(){return v}),r.d(e,"Response",function(){return g}),r.d(e,"DOMException",function(){return w}),r.d(e,"fetch",function(){return _});var n={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(n.arrayBuffer)var o=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],i=ArrayBuffer.isView||function(t){return t&&o.indexOf(Object.prototype.toString.call(t))>-1};function c(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function a(t){return"string"!=typeof t&&(t=String(t)),t}function u(t){var e={next:function(){var e=t.shift();return{done:void 0===e,value:e}}};return n.iterable&&(e[Symbol.iterator]=function(){return e}),e}function s(t){this.map={},t instanceof s?t.forEach(function(t,e){this.append(e,t)},this):Array.isArray(t)?t.forEach(function(t){this.append(t[0],t[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function l(t){return new Promise(function(e,r){t.onload=function(){e(t.result)},t.onerror=function(){r(t.error)}})}function h(t){var e=new FileReader,r=l(e);return e.readAsArrayBuffer(t),r}function p(t){if(t.slice)return t.slice(0);var e=new Uint8Array(t.byteLength);return e.set(new Uint8Array(t)),e.buffer}function y(){return this.bodyUsed=!1,this._initBody=function(t){this._bodyInit=t,t?"string"==typeof t?this._bodyText=t:n.blob&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:n.formData&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():n.arrayBuffer&&n.blob&&function(t){return t&&DataView.prototype.isPrototypeOf(t)}(t)?(this._bodyArrayBuffer=p(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):n.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(t)||i(t))?this._bodyArrayBuffer=p(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):n.searchParams&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},n.blob&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(h)}),this.text=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return function(t){var e=new FileReader,r=l(e);return e.readAsText(t),r}(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),r=new Array(e.length),n=0;n<e.length;n++)r[n]=String.fromCharCode(e[n]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},n.formData&&(this.formData=function(){return this.text().then(m)}),this.json=function(){return this.text().then(JSON.parse)},this}s.prototype.append=function(t,e){t=c(t),e=a(e);var r=this.map[t];this.map[t]=r?r+", "+e:e},s.prototype.delete=function(t){delete this.map[c(t)]},s.prototype.get=function(t){return t=c(t),this.has(t)?this.map[t]:null},s.prototype.has=function(t){return this.map.hasOwnProperty(c(t))},s.prototype.set=function(t,e){this.map[c(t)]=a(e)},s.prototype.forEach=function(t,e){for(var r in this.map)this.map.hasOwnProperty(r)&&t.call(e,this.map[r],r,this)},s.prototype.keys=function(){var t=[];return this.forEach(function(e,r){t.push(r)}),u(t)},s.prototype.values=function(){var t=[];return this.forEach(function(e){t.push(e)}),u(t)},s.prototype.entries=function(){var t=[];return this.forEach(function(e,r){t.push([r,e])}),u(t)},n.iterable&&(s.prototype[Symbol.iterator]=s.prototype.entries);var d=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function v(t,e){var r=(e=e||{}).body;if(t instanceof v){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new s(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new s(e.headers)),this.method=function(t){var e=t.toUpperCase();return d.indexOf(e)>-1?e:t}(e.method||this.method||"GET"),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function m(t){var e=new FormData;return t.trim().split("&").forEach(function(t){if(t){var r=t.split("="),n=r.shift().replace(/\+/g," "),o=r.join("=").replace(/\+/g," ");e.append(decodeURIComponent(n),decodeURIComponent(o))}}),e}function g(t,e){e||(e={}),this.type="default",this.status=void 0===e.status?200:e.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new s(e.headers),this.url=e.url||"",this._initBody(t)}v.prototype.clone=function(){return new v(this,{body:this._bodyInit})},y.call(v.prototype),y.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new s(this.headers),url:this.url})},g.error=function(){var t=new g(null,{status:0,statusText:""});return t.type="error",t};var b=[301,302,303,307,308];g.redirect=function(t,e){if(-1===b.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:t}})};var w=self.DOMException;try{new w}catch(t){(w=function(t,e){this.message=t,this.name=e;var r=Error(t);this.stack=r.stack}).prototype=Object.create(Error.prototype),w.prototype.constructor=w}function _(t,e){return new Promise(function(r,o){var i=new v(t,e);if(i.signal&&i.signal.aborted)return o(new w("Aborted","AbortError"));var c=new XMLHttpRequest;function a(){c.abort()}c.onload=function(){var t={status:c.status,statusText:c.statusText,headers:function(t){var e=new s;return t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var r=t.split(":"),n=r.shift().trim();if(n){var o=r.join(":").trim();e.append(n,o)}}),e}(c.getAllResponseHeaders()||"")};t.url="responseURL"in c?c.responseURL:t.headers.get("X-Request-URL");var e="response"in c?c.response:c.responseText;r(new g(e,t))},c.onerror=function(){o(new TypeError("Network request failed"))},c.ontimeout=function(){o(new TypeError("Network request failed"))},c.onabort=function(){o(new w("Aborted","AbortError"))},c.open(i.method,i.url,!0),"include"===i.credentials?c.withCredentials=!0:"omit"===i.credentials&&(c.withCredentials=!1),"responseType"in c&&n.blob&&(c.responseType="blob"),i.headers.forEach(function(t,e){c.setRequestHeader(e,t)}),i.signal&&(i.signal.addEventListener("abort",a),c.onreadystatechange=function(){4===c.readyState&&i.signal.removeEventListener("abort",a)}),c.send(void 0===i._bodyInit?null:i._bodyInit)})}_.polyfill=!0,self.fetch||(self.fetch=_,self.Headers=s,self.Request=v,self.Response=g)},function(t,e){t.exports=function(t,e,r,n){if(!(t instanceof e)||void 0!==n&&n in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,e,r){var n=r(11),o=r(52),i=r(53),c=r(3),a=r(36),u=r(54),s={},f={};(e=t.exports=function(t,e,r,l,h){var p,y,d,v,m=h?function(){return t}:u(t),g=n(r,l,e?2:1),b=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(p=a(t.length);p>b;b++)if((v=e?g(c(y=t[b])[0],y[1]):g(t[b]))===s||v===f)return v}else for(d=m.call(t);!(y=d.next()).done;)if((v=o(d,g,y.value,e))===s||v===f)return v}).BREAK=s,e.RETURN=f},function(t,e,r){var n=r(3);t.exports=function(t,e,r,o){try{return o?e(n(r)[0],r[1]):e(r)}catch(e){var i=t.return;throw void 0!==i&&n(i.call(t)),e}}},function(t,e,r){var n=r(15),o=r(1)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(n.Array===t||i[o]===t)}},function(t,e,r){var n=r(33),o=r(1)("iterator"),i=r(15);t.exports=r(7).getIteratorMethod=function(t){if(void 0!=t)return t[o]||t["@@iterator"]||i[n(t)]}},function(t,e,r){var n=r(3),o=r(17),i=r(1)("species");t.exports=function(t,e){var r,c=n(t).constructor;return void 0===c||void 0==(r=n(c)[i])?e:o(r)}},function(t,e){t.exports=function(t,e,r){var n=void 0===r;switch(e.length){case 0:return n?t():t.call(r);case 1:return n?t(e[0]):t.call(r,e[0]);case 2:return n?t(e[0],e[1]):t.call(r,e[0],e[1]);case 3:return n?t(e[0],e[1],e[2]):t.call(r,e[0],e[1],e[2]);case 4:return n?t(e[0],e[1],e[2],e[3]):t.call(r,e[0],e[1],e[2],e[3])}return t.apply(r,e)}},function(t,e,r){var n=r(0),o=r(38).set,i=n.MutationObserver||n.WebKitMutationObserver,c=n.process,a=n.Promise,u="process"==r(12)(c);t.exports=function(){var t,e,r,s=function(){var n,o;for(u&&(n=c.domain)&&n.exit();t;){o=t.fn,t=t.next;try{o()}catch(n){throw t?r():e=void 0,n}}e=void 0,n&&n.enter()};if(u)r=function(){c.nextTick(s)};else if(!i||n.navigator&&n.navigator.standalone)if(a&&a.resolve){var f=a.resolve(void 0);r=function(){f.then(s)}}else r=function(){o.call(n,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(n){var o={fn:n,next:void 0};e&&(e.next=o),t||(t=o,r()),e=o}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,r){var n=r(0).navigator;t.exports=n&&n.userAgent||""},function(t,e,r){var n=r(3),o=r(6),i=r(40);t.exports=function(t,e){if(n(t),o(e)&&e.constructor===t)return e;var r=i.f(t);return(0,r.resolve)(e),r.promise}},function(t,e,r){var n=r(14);t.exports=function(t,e,r){for(var o in e)n(t,o,e[o],r);return t}},function(t,e,r){"use strict";var n=r(0),o=r(9),i=r(4),c=r(1)("species");t.exports=function(t){var e=n[t];i&&e&&!e[c]&&o.f(e,c,{configurable:!0,get:function(){return this}})}},function(t,e,r){var n=r(1)("iterator"),o=!1;try{var i=[7][n]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,e){if(!e&&!o)return!1;var r=!1;try{var i=[7],c=i[n]();c.next=function(){return{done:r=!0}},i[n]=function(){return c},t(i)}catch(t){}return r}},function(t,e,r){var n=function(){return this||"object"==typeof self&&self}()||Function("return this")(),o=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,i=o&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=r(65),o)n.regeneratorRuntime=i;else try{delete n.regeneratorRuntime}catch(t){n.regeneratorRuntime=void 0}},function(t,e){!function(e){"use strict";var r,n=Object.prototype,o=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag",s="object"==typeof t,f=e.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=e.regeneratorRuntime=s?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",p="executing",y="completed",d={},v={};v[c]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(N([])));g&&g!==n&&o.call(g,c)&&(v=g);var b=S.prototype=x.prototype=Object.create(v);E.prototype=b.constructor=S,S.constructor=E,S[u]=E.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===E||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},L(O.prototype),O.prototype[a]=function(){return this},f.AsyncIterator=O,f.async=function(t,e,r,n){var o=new O(w(t,e,r,n));return f.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},L(b),b[u]="Generator",b[c]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=N,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,o){return a.type="throw",a.arg=t,e.next=n,o&&(e.method="next",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return n("end");if(c.tryLoc<=this.prev){var u=o.call(c,"catchLoc"),s=o.call(c,"finallyLoc");if(u&&s){if(this.prev<c.catchLoc)return n(c.catchLoc,!0);if(this.prev<c.finallyLoc)return n(c.finallyLoc)}else if(u){if(this.prev<c.catchLoc)return n(c.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return n(c.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:N(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),d}}}function w(t,e,r,n){var o=e&&e.prototype instanceof x?e:x,i=Object.create(o.prototype),c=new P(n||[]);return i._invoke=function(t,e,r){var n=l;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return k()}for(r.method=o,r.arg=i;;){var c=r.delegate;if(c){var a=A(c,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=_(t,e,r);if("normal"===u.type){if(n=r.done?y:h,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=y,r.method="throw",r.arg=u.arg)}}}(t,r,c),i}function _(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function E(){}function S(){}function L(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function O(t){var e;this._invoke=function(r,n){function i(){return new Promise(function(e,i){!function e(r,n,i,c){var a=_(t[r],t,n);if("throw"!==a.type){var u=a.arg,s=u.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,i,c)},function(t){e("throw",t,i,c)}):Promise.resolve(s).then(function(t){u.value=t,i(u)},function(t){return e("throw",t,i,c)})}c(a.arg)}(r,n,e,i)})}return e=e?e.then(i,i):i()}}function A(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,A(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=_(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,d;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,d):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function N(t){if(t){var e=t[c];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(o.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}return{next:k}}function k(){return{value:r,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},function(t,e){!function(e){"use strict";var r,n=Object.prototype,o=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},c=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag",s="object"==typeof t,f=e.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=e.regeneratorRuntime=s?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",p="executing",y="completed",d={},v={};v[c]=function(){return this};var m=Object.getPrototypeOf,g=m&&m(m(N([])));g&&g!==n&&o.call(g,c)&&(v=g);var b=S.prototype=x.prototype=Object.create(v);E.prototype=b.constructor=S,S.constructor=E,S[u]=E.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===E||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,S):(t.__proto__=S,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},L(O.prototype),O.prototype[a]=function(){return this},f.AsyncIterator=O,f.async=function(t,e,r,n){var o=new O(w(t,e,r,n));return f.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},L(b),b[u]="Generator",b[c]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=N,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(j),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,o){return a.type="throw",a.arg=t,e.next=n,o&&(e.method="next",e.arg=r),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var c=this.tryEntries[i],a=c.completion;if("root"===c.tryLoc)return n("end");if(c.tryLoc<=this.prev){var u=o.call(c,"catchLoc"),s=o.call(c,"finallyLoc");if(u&&s){if(this.prev<c.catchLoc)return n(c.catchLoc,!0);if(this.prev<c.finallyLoc)return n(c.finallyLoc)}else if(u){if(this.prev<c.catchLoc)return n(c.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<c.finallyLoc)return n(c.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var i=n;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var c=i?i.completion:{};return c.type=t,c.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(c)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),j(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;j(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:N(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),d}}}function w(t,e,r,n){var o=e&&e.prototype instanceof x?e:x,i=Object.create(o.prototype),c=new P(n||[]);return i._invoke=function(t,e,r){var n=l;return function(o,i){if(n===p)throw new Error("Generator is already running");if(n===y){if("throw"===o)throw i;return k()}for(r.method=o,r.arg=i;;){var c=r.delegate;if(c){var a=A(c,r);if(a){if(a===d)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=_(t,e,r);if("normal"===u.type){if(n=r.done?y:h,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=y,r.method="throw",r.arg=u.arg)}}}(t,r,c),i}function _(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function E(){}function S(){}function L(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function O(t){var e;this._invoke=function(r,n){function i(){return new Promise(function(e,i){!function e(r,n,i,c){var a=_(t[r],t,n);if("throw"!==a.type){var u=a.arg,s=u.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,i,c)},function(t){e("throw",t,i,c)}):Promise.resolve(s).then(function(t){u.value=t,i(u)},c)}c(a.arg)}(r,n,e,i)})}return e=e?e.then(i,i):i()}}function A(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,A(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var o=_(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,d;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,d):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function j(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function N(t){if(t){var e=t[c];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(o.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return i.next=i}}return{next:k}}function k(){return{value:r,done:!0}}}(function(){return this}()||Function("return this")())},function(t,e,r){var n=r(1)("unscopables"),o=Array.prototype;void 0==o[n]&&r(8)(o,n,{}),t.exports=function(t){o[n][t]=!0}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,r){var n=r(12);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==n(t)?t.split(""):Object(t)}},function(t,e,r){"use strict";var n=r(20),o=r(18),i=r(14),c=r(8),a=r(15),u=r(71),s=r(25),f=r(75),l=r(1)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,r,y,d,v,m){u(r,e,y);var g,b,w,_=function(t){if(!h&&t in L)return L[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},x=e+" Iterator",E="values"==d,S=!1,L=t.prototype,O=L[l]||L["@@iterator"]||d&&L[d],A=O||_(d),T=d?E?_("entries"):A:void 0,j="Array"==e&&L.entries||O;if(j&&(w=f(j.call(new t)))!==Object.prototype&&w.next&&(s(w,x,!0),n||"function"==typeof w[l]||c(w,l,p)),E&&O&&"values"!==O.name&&(S=!0,A=function(){return O.call(this)}),n&&!m||!h&&!S&&L[l]||c(L,l,A),a[e]=A,a[x]=p,d)if(g={values:E?A:_("values"),keys:v?A:_("keys"),entries:T},m)for(b in g)b in L||i(L,b,g[b]);else o(o.P+o.F*(h||S),e,g);return g}},function(t,e,r){"use strict";var n=r(43),o=r(24),i=r(25),c={};r(8)(c,r(1)("iterator"),function(){return this}),t.exports=function(t,e,r){t.prototype=n(c,{next:o(1,r)}),i(t,e+" Iterator")}},function(t,e,r){var n=r(9),o=r(3),i=r(28);t.exports=r(4)?Object.defineProperties:function(t,e){o(t);for(var r,c=i(e),a=c.length,u=0;a>u;)n.f(t,r=c[u++],e[r]);return t}},function(t,e,r){var n=r(19),o=r(36),i=r(74);t.exports=function(t){return function(e,r,c){var a,u=n(e),s=o(u.length),f=i(c,s);if(t&&r!=r){for(;s>f;)if((a=u[f++])!=a)return!0}else for(;s>f;f++)if((t||f in u)&&u[f]===r)return t||f||0;return!t&&-1}}},function(t,e,r){var n=r(37),o=Math.max,i=Math.min;t.exports=function(t,e){return(t=n(t))<0?o(t+e,0):i(t,e)}},function(t,e,r){var n=r(10),o=r(45),i=r(29)("IE_PROTO"),c=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),n(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?c:null}},function(t,e,r){var n=r(45),o=r(28);r(77)("keys",function(){return function(t){return o(n(t))}})},function(t,e,r){var n=r(18),o=r(7),i=r(13);t.exports=function(t,e){var r=(o.Object||{})[t]||Object[t],c={};c[t]=e(r),n(n.S+n.F*i(function(){r(1)}),"Object",c)}},function(t,e,r){"use strict";var n=r(0),o=r(10),i=r(12),c=r(79),a=r(23),u=r(13),s=r(82).f,f=r(46).f,l=r(9).f,h=r(83).trim,p=n.Number,y=p,d=p.prototype,v="Number"==i(r(43)(d)),m="trim"in String.prototype,g=function(t){var e=a(t,!1);if("string"==typeof e&&e.length>2){var r,n,o,i=(e=m?e.trim():h(e,3)).charCodeAt(0);if(43===i||45===i){if(88===(r=e.charCodeAt(2))||120===r)return NaN}else if(48===i){switch(e.charCodeAt(1)){case 66:case 98:n=2,o=49;break;case 79:case 111:n=8,o=55;break;default:return+e}for(var c,u=e.slice(2),s=0,f=u.length;s<f;s++)if((c=u.charCodeAt(s))<48||c>o)return NaN;return parseInt(u,n)}}return+e};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var e=arguments.length<1?0:t,r=this;return r instanceof p&&(v?u(function(){d.valueOf.call(r)}):"Number"!=i(r))?c(new y(g(e)),r,p):g(e)};for(var b,w=r(4)?s(y):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),_=0;w.length>_;_++)o(y,b=w[_])&&!o(p,b)&&l(p,b,f(y,b));p.prototype=d,d.constructor=p,r(14)(n,"Number",p)}},function(t,e,r){var n=r(6),o=r(80).set;t.exports=function(t,e,r){var i,c=e.constructor;return c!==r&&"function"==typeof c&&(i=c.prototype)!==r.prototype&&n(i)&&o&&o(t,i),t}},function(t,e,r){var n=r(6),o=r(3),i=function(t,e){if(o(t),!n(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,n){try{(n=r(11)(Function.call,r(46).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,r){return i(t,r),e?t.__proto__=r:n(t,r),t}}({},!1):void 0),check:i}},function(t,e){e.f={}.propertyIsEnumerable},function(t,e,r){var n=r(44),o=r(30).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return n(t,o)}},function(t,e,r){var n=r(18),o=r(27),i=r(13),c=r(84),a="["+c+"]",u=RegExp("^"+a+a+"*"),s=RegExp(a+a+"*$"),f=function(t,e,r){var o={},a=i(function(){return!!c[t]()||"​"!="​"[t]()}),u=o[t]=a?e(l):c[t];r&&(o[r]=u),n(n.P+n.F*a,"String",o)},l=f.trim=function(t,e){return t=String(o(t)),1&e&&(t=t.replace(u,"")),2&e&&(t=t.replace(s,"")),t};t.exports=f},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,r){"use strict";r.r(e);r(32);var n=r(16),o=r.n(n),i=(r(66),r(31)),c=r.n(i),a=r(5),u=r.n(a),s=r(2),f=r.n(s),l=function(){function t(){u()(this,t)}return f()(t,null,[{key:"httpGetAllSources",value:function(){var t=c()(o.a.mark(function t(){var e;return o.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,fetch(this.URL_ALL_SOURCES);case 2:if(200===(e=t.sent).status){t.next=5;break}return t.abrupt("return",Promise.reject(e));case 5:return t.abrupt("return",e.json());case 6:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"httpGetArticlesSource",value:function(){var t=c()(o.a.mark(function t(e,r){var n,i;return o.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n="".concat(this.URL_SOURCE,"/?sources=").concat(e,"&pageSize=").concat(r),t.next=3,fetch(n,this.requestOptions);case 3:if(200===(i=t.sent).status){t.next=6;break}return t.abrupt("return",Promise.reject(i));case 6:return t.abrupt("return",i.json());case 7:case"end":return t.stop()}},t,this)}));return function(e,r){return t.apply(this,arguments)}}()},{key:"API_KEY",get:function(){return"7e92c05c99e645baacb7560198807645"}},{key:"URL_ALL_SOURCES",get:function(){return"https://newsapi.org/v1/sources"}},{key:"URL_SOURCE",get:function(){return"https://newsapi.org/v2/everything"}},{key:"requestOptions",get:function(){return{method:"GET",mode:"cors",headers:{"X-Api-Key":this.API_KEY}}}}]),t}(),h=r(47),p=r.n(h);r(41),r(26),r(42),r(76);function y(t){var e=t.tagName,r=t.innerText,n=t.innerHTML,o=t.className,i=t.attrs,c=document.createElement(e);return o&&c.classList.add(o),r&&(c.innerText=r),n&&(c.innerHTML=n),i&&Object.keys(i).forEach(function(t){c.setAttribute(t,i[t])}),c}var d=function(){function t(e){u()(this,t),this.nodeSourceContent=document.querySelector(e),this.articlesContainer=null}return f()(t,[{key:"createArticles",value:function(){var t=document.createDocumentFragment(),e=y({tagName:"div",className:"source-content__articles"});return this.articlesContainer.forEach(function(t){var r=new Date(t.publishedAt).toLocaleString(),n=t.urlToImage?'<img src="'.concat(t.urlToImage,'" width="180" height="140" alt="Image news" class="source-article__img">'):'<div class="source-article__instead-img"></div>',o=y({tagName:"article",className:"source-article",innerHTML:"\n          ".concat(n,'\n          <h3 class="source-article__title">').concat(t.title,'</h3>\n          <p class="source-article__description">').concat(t.description,'</p>\n          <span class="source-article__date">').concat(r,'</span>\n          <a href="').concat(t.url,'" target="_blank" class="source-article__link">See more</a>')});e.appendChild(o)}),t.appendChild(e),t}},{key:"redirectArticles",value:function(t,e){var r=this,n=this.nodeSourceContent.querySelector(".source-content__articles");n.innerHTML="Please wait...",l.httpGetArticlesSource(t,e).then(function(t){var e=t.articles;r.articles=e,r.viewNameSourceContent(),r.viewArticles()}).catch(function(t){n.innerHTML="",alert("Error. ".concat(t))})}},{key:"viewArticles",value:function(){var t=this.nodeSourceContent.querySelector(".source-content__articles"),e=this.createArticles();t.replaceWith(e)}},{key:"viewNameSourceContent",value:function(){this.nodeSourceContent.querySelector(".source-content__author").innerText=this.articlesContainer[0].source.name}},{key:"articles",set:function(t){this.articlesContainer=t}}]),t}();r(78);var v=function(){function t(e){u()(this,t),this.nodeFilterSources=document.querySelector(e),this.countNews=this.countNews,this.nodeFilterSources.querySelector(".filter-sources__range").onchange=function(t){this.countNews=t.target.value;var e=new d(".source-content"),r=new m(".all-sources").idCurrentSource;e.redirectArticles(r,this.countNews)}.bind(this)}return f()(t,[{key:"countNews",set:function(t){this.nodeFilterSources.querySelector(".filter-sources__value").innerText=t},get:function(){var t=this.nodeFilterSources.querySelector(".filter-sources__range").value;return Number(t)}}]),t}();var m=function(){function t(e){u()(this,t),this.nodeSources=document.querySelector(e),this.sourcesContainer=null,this.curentNode=null,document.querySelector(e).onclick=function(t){var e=t.target;if("LI"===e.tagName){var r=e.getAttribute("data-id-source"),n=new v(".filter-sources").countNews,o=new d(".source-content");this.clickCurentNode=e,o.redirectArticles(r,n)}}.bind(this)}return f()(t,null,[{key:"NAME_CLASS_CURENT_NODE",get:function(){return"all-sources__curent-item"}},{key:"DATA_ID_SOURCE",get:function(){return"data-id-source"}}]),f()(t,[{key:"createSources",value:function(){var e=document.createDocumentFragment();return this.sourcesContainer.forEach(function(r){var n=y({tagName:"li",innerText:r.name,className:"all-sources__item",attrs:p()({},t.DATA_ID_SOURCE,r.id)});e.appendChild(n)}),e}},{key:"viewSources",value:function(){var t=this.createSources();this.nodeSources.appendChild(t)}},{key:"sources",set:function(t){this.sourcesContainer=t}},{key:"clickCurentNode",set:function(e){this.curentNode&&this.curentNode.classList.remove(t.NAME_CLASS_CURENT_NODE),this.curentNode=e,this.curentNode.classList.add(t.NAME_CLASS_CURENT_NODE)}},{key:"idCurrentSource",get:function(){return this.nodeSources.querySelector(".".concat(t.NAME_CLASS_CURENT_NODE)).getAttribute(t.DATA_ID_SOURCE)}}]),t}();l.httpGetAllSources().then(function(t){var e=t.sources;e||Promise.reject(e);var r=new m(".all-sources__list"),n=new d(".source-content"),o=new v(".filter-sources").countNews;r.sources=e,r.viewSources(),r.clickCurentNode=r.nodeSources.firstElementChild,n.redirectArticles(e[0].id,o)}).catch(function(t){alert("Error. ".concat(t))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2N0eC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlcmF0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb3BlcnR5LWRlc2MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FzeW5jVG9HZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93aGF0d2ctZmV0Y2gvZmV0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NwZWNpZXMtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW52b2tlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3VzZXItYWdlbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2luaGVyaXQtaWYtcmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9uZXdzLWFwaS9uZXdzLWFwaS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdXRpbHMvbm9kZS11dGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL3NvdXJjZS1jb250ZW50L3NvdXJjZS1jb250ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL2ZpbHRlci1zb3VyY2VzL2ZpbHRlci1zb3VyY2VzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL2ZpbHRlci1zb3VyY2VzL2V2ZW50cy1maWx0ZXItc291cmNlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9hbGwtc291cmNlcy9hbGwtc291cmNlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9hbGwtc291cmNlcy9ldmVudHMtYWxsLXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImdsb2JhbCIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwibGVuZ3RoIiwiZGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwiYSIsImluc3RhbmNlIiwiY29yZSIsInZlcnNpb24iLCJfX2UiLCJkUCIsImNyZWF0ZURlc2MiLCJmIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiTyIsIlAiLCJBdHRyaWJ1dGVzIiwiZSIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsInVuZGVmaW5lZCIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsInRvU3RyaW5nIiwic2xpY2UiLCJleGVjIiwiaGlkZSIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInRoaXMiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJ0eXBlIiwic291cmNlIiwib3duIiwib3V0IiwiZXhwIiwiSVNfRk9SQ0VEIiwiRiIsIklTX0dMT0JBTCIsIkciLCJJU19TVEFUSUMiLCJTIiwiSVNfUFJPVE8iLCJJU19CSU5EIiwiQiIsImV4cFByb3RvIiwiVSIsIlciLCJSIiwiSU9iamVjdCIsImRlZmluZWQiLCJpZCIsInB4IiwicmFuZG9tIiwiY29uY2F0IiwiZG9jdW1lbnQiLCJpcyIsImNyZWF0ZUVsZW1lbnQiLCJ2YWx1ZU9mIiwiYml0bWFwIiwiZGVmIiwiVEFHIiwidGFnIiwic3RhdCIsIiRpdGVyYXRvcnMiLCJnZXRLZXlzIiwiSXRlcmF0b3JzIiwid2tzIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJBcnJheSIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJOQU1FIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwicHJvdG8iLCIka2V5cyIsImVudW1CdWdLZXlzIiwia2V5cyIsInNoYXJlZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlc29sdmUiLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImFyZyIsImluZm8iLCJlcnJvciIsImRvbmUiLCJQcm9taXNlIiwidGhlbiIsImFyZ3MiLCJlcnIiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsIkxJQlJBUlkiLCJjbGFzc29mIiwiYW5JbnN0YW5jZSIsImZvck9mIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsInNldCIsIm1pY3JvdGFzayIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsInVzZXJBZ2VudCIsInByb21pc2VSZXNvbHZlIiwicHJvY2VzcyIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImlzTm9kZSIsImVtcHR5IiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJVU0VfTkFUSVZFIiwicHJvbWlzZSIsIkZha2VQcm9taXNlIiwiY29uc3RydWN0b3IiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpbmRleE9mIiwiaXNUaGVuYWJsZSIsIm5vdGlmeSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicnVuIiwicmVhY3Rpb24iLCJyZXN1bHQiLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsImRvbWFpbiIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJlbnRlciIsImV4aXQiLCJvblVuaGFuZGxlZCIsImNvbnNvbGUiLCJ1bmhhbmRsZWQiLCJpc1VuaGFuZGxlZCIsImVtaXQiLCJvbnVuaGFuZGxlZHJlamVjdGlvbiIsInJlYXNvbiIsIl9hIiwidiIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfZCIsIl93IiwiJHJlc29sdmUiLCJ3cmFwcGVyIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJwdXNoIiwiY2F0Y2giLCJDIiwiY2FwYWJpbGl0eSIsIiQkcmVqZWN0IiwieCIsIml0ZXIiLCJhbGwiLCJpdGVyYWJsZSIsInZhbHVlcyIsImluZGV4IiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCJjb2YiLCJBUkciLCJUIiwidHJ5R2V0IiwiY2FsbGVlIiwiY29weXJpZ2h0IiwidG9JbnRlZ2VyIiwibWluIiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJsaXN0ZW5lciIsImV2ZW50IiwiZGF0YSIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImNsZWFyIiwiZG9jdW1lbnRFbGVtZW50IiwiJCRyZXNvbHZlIiwiRlByb3RvIiwibmFtZVJFIiwibWF0Y2giLCJhZGRUb1Vuc2NvcGFibGVzIiwic3RlcCIsInRvSU9iamVjdCIsIml0ZXJhdGVkIiwia2luZCIsIl90IiwiX2kiLCJfayIsIkFyZ3VtZW50cyIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJhcnJheUluZGV4T2YiLCJuYW1lcyIsInBJRSIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmoiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiSGVhZGVycyIsIlJlcXVlc3QiLCJSZXNwb25zZSIsIkRPTUV4Y2VwdGlvbiIsImZldGNoIiwic3VwcG9ydCIsInNlYXJjaFBhcmFtcyIsImJsb2IiLCJCbG9iIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm5vcm1hbGl6ZU5hbWUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVWYWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsImhlYWRlcnMiLCJtYXAiLCJmb3JFYWNoIiwiYXBwZW5kIiwiaXNBcnJheSIsImhlYWRlciIsImdldE93blByb3BlcnR5TmFtZXMiLCJjb25zdW1lZCIsImJvZHkiLCJib2R5VXNlZCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsIm9ubG9hZCIsIm9uZXJyb3IiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicmVhZEFzQXJyYXlCdWZmZXIiLCJidWZmZXJDbG9uZSIsImJ1ZiIsInZpZXciLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiRGF0YVZpZXciLCJpc0RhdGFWaWV3IiwiX2JvZHlBcnJheUJ1ZmZlciIsInJlamVjdGVkIiwiRXJyb3IiLCJ0ZXh0IiwicmVhZEFzVGV4dCIsInJlYWRCbG9iQXNUZXh0IiwiY2hhcnMiLCJmcm9tQ2hhckNvZGUiLCJyZWFkQXJyYXlCdWZmZXJBc1RleHQiLCJkZWNvZGUiLCJqc29uIiwiSlNPTiIsInBhcnNlIiwib2xkVmFsdWUiLCJjYWxsYmFjayIsInRoaXNBcmciLCJlbnRyaWVzIiwibWV0aG9kcyIsImlucHV0Iiwib3B0aW9ucyIsInVybCIsImNyZWRlbnRpYWxzIiwibWV0aG9kIiwic2lnbmFsIiwidXBjYXNlZCIsInRvVXBwZXJDYXNlIiwibm9ybWFsaXplTWV0aG9kIiwicmVmZXJyZXIiLCJmb3JtIiwidHJpbSIsImJ5dGVzIiwicmVwbGFjZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImJvZHlJbml0Iiwic3RhdHVzIiwic3RhdHVzVGV4dCIsImNsb25lIiwicmVzcG9uc2UiLCJyZWRpcmVjdFN0YXR1c2VzIiwicmVkaXJlY3QiLCJSYW5nZUVycm9yIiwibG9jYXRpb24iLCJtZXNzYWdlIiwic3RhY2siLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwibGluZSIsInBhcnRzIiwicGFyc2VIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlYWR5U3RhdGUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2VuZCIsInBvbHlmaWxsIiwiZm9yYmlkZGVuRmllbGQiLCJpc0FycmF5SXRlciIsInRvTGVuZ3RoIiwiZ2V0SXRlckZuIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyRm4iLCJyZXQiLCJBcnJheVByb3RvIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJTUEVDSUVTIiwiRCIsInVuIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImhlYWQiLCJsYXN0IiwiZmx1c2giLCJwYXJlbnQiLCJuYXZpZ2F0b3IiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJwcm9taXNlQ2FwYWJpbGl0eSIsIkRFU0NSSVBUT1JTIiwiS0VZIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJmcm9tIiwic2tpcENsb3NpbmciLCJhcnIiLCJnIiwiaGFkUnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIm9sZFJ1bnRpbWUiLCJPcCIsImhhc093biIsIiRTeW1ib2wiLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJ3cmFwIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJnZXRQcm90b3R5cGVPZiIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsIkdlbmVyYXRvciIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJyZXZlcnNlIiwicG9wIiwiQ29udGV4dCIsInJlc2V0Iiwic2tpcFRlbXBSZXNldCIsInByZXYiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5IiwiY2hhckF0Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiY29udGV4dCIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsImVudHJ5IiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJhZnRlckxvYyIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZXN1bHROYW1lIiwibmV4dExvYyIsInByb3RvR2VuZXJhdG9yIiwiZ2VuZXJhdG9yIiwiX2ludm9rZSIsInN0YXRlIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInRyeUNhdGNoIiwibWFrZUludm9rZU1ldGhvZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwidW53cmFwcGVkIiwicmV0dXJuIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiVU5TQ09QQUJMRVMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRpdGVyQ3JlYXRlIiwic2V0VG9TdHJpbmdUYWciLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZGVmaW5lUHJvcGVydGllcyIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsIm1heCIsInRvT2JqZWN0IiwiT2JqZWN0UHJvdG8iLCJmYWlscyIsImluaGVyaXRJZlJlcXVpcmVkIiwiZ09QTiIsIiR0cmltIiwiJE51bWJlciIsIkJST0tFTl9DT0YiLCJUUklNIiwidG9OdW1iZXIiLCJhcmd1bWVudCIsInRoaXJkIiwicmFkaXgiLCJtYXhDb2RlIiwiZmlyc3QiLCJjaGFyQ29kZUF0IiwiTmFOIiwiY29kZSIsImRpZ2l0cyIsInBhcnNlSW50IiwiaiIsImNoZWNrIiwiYnVnZ3kiLCJoaWRkZW5LZXlzIiwic3BhY2VzIiwic3BhY2UiLCJsdHJpbSIsIlJlZ0V4cCIsInJ0cmltIiwiZXhwb3J0ZXIiLCJBTElBUyIsIkZPUkNFIiwic3RyaW5nIiwiVFlQRSIsIk5ld3NBcGkiLCJVUkxfQUxMX1NPVVJDRVMiLCJyZXNwb25jZSIsImlkU291cmNlIiwibnVtYmVyQXJ0aWNsZXMiLCJxdWVyeVVSTCIsIlVSTF9TT1VSQ0UiLCJyZXF1ZXN0T3B0aW9ucyIsIlgtQXBpLUtleSIsIkFQSV9LRVkiLCJjcmVhdGVOb2RlIiwiX3JlZiIsInRhZ05hbWUiLCJpbm5lclRleHQiLCJpbm5lckhUTUwiLCJjbGFzc05hbWUiLCJhdHRycyIsImNsYXNzTGlzdCIsImFkZCIsImF0dHIiLCJzZXRBdHRyaWJ1dGUiLCJTb3VyY2VDb250ZW50Iiwibm9kZVNlbGVjdG9yIiwiY2xhc3NDYWxsQ2hlY2tfZGVmYXVsdCIsIm5vZGVTb3VyY2VDb250ZW50IiwicXVlcnlTZWxlY3RvciIsImFydGljbGVzQ29udGFpbmVyIiwiZnJhZ21lbnRDb250YWluZXJBcnRpY2xlcyIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlRGl2IiwiYXJ0aWNsZSIsImRhdGUiLCJEYXRlIiwicHVibGlzaGVkQXQiLCJ0b0xvY2FsZVN0cmluZyIsImlubmVyaW1nIiwidXJsVG9JbWFnZSIsIm5vZGVBcnRpY2xlIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsImNvdW50TmV3cyIsIl90aGlzIiwibm9kZUFydGljbGVzIiwiaHR0cEdldEFydGljbGVzU291cmNlIiwiYXJ0aWNsZXMiLCJ2aWV3TmFtZVNvdXJjZUNvbnRlbnQiLCJ2aWV3QXJ0aWNsZXMiLCJlcnJvck1lc3NhZ2UiLCJhbGVydCIsImZyYWdtZW50QXJ0aWNsZXMiLCJjcmVhdGVBcnRpY2xlcyIsInJlcGxhY2VXaXRoIiwiRmlsdGVyU291cmNlcyIsIm5vZGVGaWx0ZXJTb3VyY2VzIiwib25jaGFuZ2UiLCJzb3VyY2VDb250ZW50IiwiaWRDdXJyZW50U291cmNlIiwiQWxsU291cmNlcyIsInJlZGlyZWN0QXJ0aWNsZXMiLCJjb3VudCIsIk51bWJlciIsIm5vZGVTb3VyY2VzIiwic291cmNlc0NvbnRhaW5lciIsImN1cmVudE5vZGUiLCJvbmNsaWNrIiwiY2xpY2tFbGVtIiwiZ2V0QXR0cmlidXRlIiwiY2xpY2tDdXJlbnROb2RlIiwiZnJhZ21lbnRDb250YWluZXJMaXN0Iiwibm9kZUxJIiwiZGVmaW5lUHJvcGVydHlfZGVmYXVsdCIsIkRBVEFfSURfU09VUkNFIiwiZnJhZ21lbnRTb3VyY2VzIiwiY3JlYXRlU291cmNlcyIsInNvdXJjZXMiLCJyZW1vdmUiLCJOQU1FX0NMQVNTX0NVUkVOVF9OT0RFIiwiaHR0cEdldEFsbFNvdXJjZXMiLCJhbGxTb3VyY2VzIiwidmlld1NvdXJjZXMiLCJmaXJzdEVsZW1lbnRDaGlsZCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixF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a0IsS0FFL0M5YixNQUFNLFNBQUNxYyxHQUNOQyxNQUFLLFVBQUFubEIsT0FBV2tsQiIsImZpbGUiOiJtYWluLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0OCk7XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXG4gID8gd2luZG93IDogdHlwZW9mIHNlbGYgIT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi5NYXRoID09IE1hdGggPyBzZWxmXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5pZiAodHlwZW9mIF9fZyA9PSAnbnVtYmVyJykgX19nID0gZ2xvYmFsOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4iLCJ2YXIgc3RvcmUgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnd2tzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xudmFyIFVTRV9TWU1CT0wgPSB0eXBlb2YgU3ltYm9sID09ICdmdW5jdGlvbic7XG5cbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHN0b3JlW25hbWVdIHx8IChzdG9yZVtuYW1lXSA9XG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcbn07XG5cbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTtcbiAgICBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7XG4gICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcbiAgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpO1xuICByZXR1cm4gQ29uc3RydWN0b3I7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NyZWF0ZUNsYXNzOyIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGFuIG9iamVjdCEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcbn0pO1xuIiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3Rvcikge1xuICBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY2xhc3NDYWxsQ2hlY2s7IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi41LjcnIH07XG5pZiAodHlwZW9mIF9fZSA9PSAnbnVtYmVyJykgX19lID0gY29yZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XG52YXIgZFAgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCEnKTtcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDE6IHJldHVybiBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XG4gICAgfTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XG4gICAgfTtcbiAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykge1xuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcbiAgfTtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSBGdW5jdGlvbltUT19TVFJJTkddO1xudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcblxucmVxdWlyZSgnLi9fY29yZScpLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcbn07XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsICduYW1lJykgfHwgaGlkZSh2YWwsICduYW1lJywga2V5KTtcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcbiAgaWYgKE8gPT09IGdsb2JhbCkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIGlmICghc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gICAgaGlkZShPLCBrZXksIHZhbCk7XG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XG4gICAgT1trZXldID0gdmFsO1xuICB9IGVsc2Uge1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9XG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgdGhpc1tTUkNdIHx8ICR0b1N0cmluZy5jYWxsKHRoaXMpO1xufSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xuXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XG4gIHZhciBJU19HTE9CQUwgPSB0eXBlICYgJGV4cG9ydC5HO1xuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcbiAgdmFyIElTX0JJTkQgPSB0eXBlICYgJGV4cG9ydC5CO1xuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xuICB2YXIgZXhwUHJvdG8gPSBleHBvcnRzW1BST1RPVFlQRV0gfHwgKGV4cG9ydHNbUFJPVE9UWVBFXSA9IHt9KTtcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcbiAgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcbiAgICAvLyBleHBvcnQgbmF0aXZlIG9yIHBhc3NlZFxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcbiAgICBleHAgPSBJU19CSU5EICYmIG93biA/IGN0eChvdXQsIGdsb2JhbCkgOiBJU19QUk9UTyAmJiB0eXBlb2Ygb3V0ID09ICdmdW5jdGlvbicgPyBjdHgoRnVuY3Rpb24uY2FsbCwgb3V0KSA6IG91dDtcbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XG4gICAgLy8gZXhwb3J0XG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcbiAgfVxufTtcbmdsb2JhbC5jb3JlID0gY29yZTtcbi8vIHR5cGUgYml0bWFwXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcbiRleHBvcnQuUyA9IDQ7ICAgLy8gc3RhdGljXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcbiRleHBvcnQuVyA9IDMyOyAgLy8gd3JhcFxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcbm1vZHVsZS5leHBvcnRzID0gJGV4cG9ydDtcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGlkID0gMDtcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJy5jb25jYXQoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSwgJylfJywgKCsraWQgKyBweCkudG9TdHJpbmcoMzYpKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwiZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykge1xuICB0cnkge1xuICAgIHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTtcbiAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlamVjdChlcnJvcik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGluZm8uZG9uZSkge1xuICAgIHJlc29sdmUodmFsdWUpO1xuICB9IGVsc2Uge1xuICAgIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgYXJncyA9IGFyZ3VtZW50cztcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuXG4gICAgICBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkge1xuICAgICAgICBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIFwibmV4dFwiLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF90aHJvdyhlcnIpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcInRocm93XCIsIGVycik7XG4gICAgICB9XG5cbiAgICAgIF9uZXh0KHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FzeW5jVG9HZW5lcmF0b3I7IiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTggRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPiAwID8gbWluKHRvSW50ZWdlcihpdCksIDB4MWZmZmZmZmZmZmZmZmYpIDogMDsgLy8gcG93KDIsIDUzKSAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhclRhc2sgPSBnbG9iYWwuY2xlYXJJbW1lZGlhdGU7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBpZCA9ICt0aGlzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xufTtcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XG4gIHNldFRhc2sgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xuICAgICAgaW52b2tlKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbiksIGFyZ3MpO1xuICAgIH07XG4gICAgZGVmZXIoY291bnRlcik7XG4gICAgcmV0dXJuIGNvdW50ZXI7XG4gIH07XG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChyZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2VzcycpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xuICAgIH07XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xuICAgICAgICBydW4uY2FsbChpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQoY3R4KHJ1biwgaWQsIDEpLCAwKTtcbiAgICB9O1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXRUYXNrLFxuICBjbGVhcjogY2xlYXJUYXNrXG59O1xuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG52YXIgRlByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcbnZhciBOQU1FID0gJ25hbWUnO1xuXG4vLyAxOS4yLjQuMiBuYW1lXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKCcnICsgdGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgaW4gb2JqKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIG9iajtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwidmFyIHN1cHBvcnQgPSB7XG4gIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgaXRlcmFibGU6ICdTeW1ib2wnIGluIHNlbGYgJiYgJ2l0ZXJhdG9yJyBpbiBTeW1ib2wsXG4gIGJsb2I6XG4gICAgJ0ZpbGVSZWFkZXInIGluIHNlbGYgJiZcbiAgICAnQmxvYicgaW4gc2VsZiAmJlxuICAgIChmdW5jdGlvbigpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ldyBCbG9iKClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfSkoKSxcbiAgZm9ybURhdGE6ICdGb3JtRGF0YScgaW4gc2VsZixcbiAgYXJyYXlCdWZmZXI6ICdBcnJheUJ1ZmZlcicgaW4gc2VsZlxufVxuXG5mdW5jdGlvbiBpc0RhdGFWaWV3KG9iaikge1xuICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iailcbn1cblxuaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIpIHtcbiAgdmFyIHZpZXdDbGFzc2VzID0gW1xuICAgICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAnW29iamVjdCBVaW50MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nXG4gIF1cblxuICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPVxuICAgIEFycmF5QnVmZmVyLmlzVmlldyB8fFxuICAgIGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB2aWV3Q2xhc3Nlcy5pbmRleE9mKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopKSA+IC0xXG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcbiAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xuICAgIG5hbWUgPSBTdHJpbmcobmFtZSlcbiAgfVxuICBpZiAoL1teYS16MC05XFwtIyQlJicqKy5eX2B8fl0vaS50ZXN0KG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBjaGFyYWN0ZXIgaW4gaGVhZGVyIGZpZWxkIG5hbWUnKVxuICB9XG4gIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSlcbiAgfVxuICByZXR1cm4gdmFsdWVcbn1cblxuLy8gQnVpbGQgYSBkZXN0cnVjdGl2ZSBpdGVyYXRvciBmb3IgdGhlIHZhbHVlIGxpc3RcbmZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gIHZhciBpdGVyYXRvciA9IHtcbiAgICBuZXh0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KClcbiAgICAgIHJldHVybiB7ZG9uZTogdmFsdWUgPT09IHVuZGVmaW5lZCwgdmFsdWU6IHZhbHVlfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGl0ZXJhdG9yXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0ZXJhdG9yXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdGhpcy5tYXAgPSB7fVxuXG4gIGlmIChoZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgdGhpcy5hcHBlbmQobmFtZSwgdmFsdWUpXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGhlYWRlcnMpKSB7XG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pXG4gICAgfSwgdGhpcylcbiAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKVxuICAgIH0sIHRoaXMpXG4gIH1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSlcbiAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbiAgdmFyIG9sZFZhbHVlID0gdGhpcy5tYXBbbmFtZV1cbiAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWVcbn1cblxuSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xuICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV1cbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKVxuICByZXR1cm4gdGhpcy5oYXMobmFtZSkgPyB0aGlzLm1hcFtuYW1lXSA6IG51bGxcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSlcbn1cblxuSGVhZGVycy5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gIGZvciAodmFyIG5hbWUgaW4gdGhpcy5tYXApIHtcbiAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgdGhpcy5tYXBbbmFtZV0sIG5hbWUsIHRoaXMpXG4gICAgfVxuICB9XG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChuYW1lKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgaXRlbXMgPSBbXVxuICB0aGlzLmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpdGVtcy5wdXNoKHZhbHVlKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbkhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGl0ZW1zID0gW11cbiAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKVxuICB9KVxuICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXG59XG5cbmlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gIEhlYWRlcnMucHJvdG90eXBlW1N5bWJvbC5pdGVyYXRvcl0gPSBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzXG59XG5cbmZ1bmN0aW9uIGNvbnN1bWVkKGJvZHkpIHtcbiAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcignQWxyZWFkeSByZWFkJykpXG4gIH1cbiAgYm9keS5ib2R5VXNlZCA9IHRydWVcbn1cblxuZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KVxuICAgIH1cbiAgICByZWFkZXIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmVqZWN0KHJlYWRlci5lcnJvcilcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNBcnJheUJ1ZmZlcihibG9iKSB7XG4gIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpXG4gIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcilcbiAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpXG4gIHJldHVybiBwcm9taXNlXG59XG5cbmZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgdmFyIHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKVxuICByZWFkZXIucmVhZEFzVGV4dChibG9iKVxuICByZXR1cm4gcHJvbWlzZVxufVxuXG5mdW5jdGlvbiByZWFkQXJyYXlCdWZmZXJBc1RleHQoYnVmKSB7XG4gIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKVxuICB2YXIgY2hhcnMgPSBuZXcgQXJyYXkodmlldy5sZW5ndGgpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2aWV3Lmxlbmd0aDsgaSsrKSB7XG4gICAgY2hhcnNbaV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHZpZXdbaV0pXG4gIH1cbiAgcmV0dXJuIGNoYXJzLmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xuICBpZiAoYnVmLnNsaWNlKSB7XG4gICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxuICB9IGVsc2Uge1xuICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpXG4gICAgdmlldy5zZXQobmV3IFVpbnQ4QXJyYXkoYnVmKSlcbiAgICByZXR1cm4gdmlldy5idWZmZXJcbiAgfVxufVxuXG5mdW5jdGlvbiBCb2R5KCkge1xuICB0aGlzLmJvZHlVc2VkID0gZmFsc2VcblxuICB0aGlzLl9pbml0Qm9keSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICB0aGlzLl9ib2R5SW5pdCA9IGJvZHlcbiAgICBpZiAoIWJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJydcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgdGhpcy5fYm9keUJsb2IgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpXG4gICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5LmJ1ZmZlcilcbiAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXG4gICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKVxuICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlciAmJiAoQXJyYXlCdWZmZXIucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkgfHwgaXNBcnJheUJ1ZmZlclZpZXcoYm9keSkpKSB7XG4gICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYm9keSlcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpKSB7XG4gICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICd0ZXh0L3BsYWluO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QmxvYiAmJiB0aGlzLl9ib2R5QmxvYi50eXBlKSB7XG4gICAgICAgIHRoaXMuaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsIHRoaXMuX2JvZHlCbG9iLnR5cGUpXG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChzdXBwb3J0LmJsb2IpIHtcbiAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpXG4gICAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdGVkXG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlCbG9iKVxuICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSkpXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgYmxvYicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5VGV4dF0pKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbnN1bWVkKHRoaXMpIHx8IFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5ibG9iKCkudGhlbihyZWFkQmxvYkFzQXJyYXlCdWZmZXIpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcylcbiAgICBpZiAocmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiByZWplY3RlZFxuICAgIH1cblxuICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgcmV0dXJuIHJlYWRCbG9iQXNUZXh0KHRoaXMuX2JvZHlCbG9iKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlYWRBcnJheUJ1ZmZlckFzVGV4dCh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpKVxuICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCByZWFkIEZvcm1EYXRhIGJvZHkgYXMgdGV4dCcpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keVRleHQpXG4gICAgfVxuICB9XG5cbiAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICB0aGlzLmZvcm1EYXRhID0gZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy50ZXh0KCkudGhlbihkZWNvZGUpXG4gICAgfVxuICB9XG5cbiAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxudmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ11cblxuZnVuY3Rpb24gbm9ybWFsaXplTWV0aG9kKG1ldGhvZCkge1xuICB2YXIgdXBjYXNlZCA9IG1ldGhvZC50b1VwcGVyQ2FzZSgpXG4gIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2Rcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdmFyIGJvZHkgPSBvcHRpb25zLmJvZHlcblxuICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XG4gICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxuICAgIH1cbiAgICB0aGlzLnVybCA9IGlucHV0LnVybFxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBpbnB1dC5jcmVkZW50aWFsc1xuICAgIGlmICghb3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKVxuICAgIH1cbiAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZFxuICAgIHRoaXMubW9kZSA9IGlucHV0Lm1vZGVcbiAgICB0aGlzLnNpZ25hbCA9IGlucHV0LnNpZ25hbFxuICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xuICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdFxuICAgICAgaW5wdXQuYm9keVVzZWQgPSB0cnVlXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRoaXMudXJsID0gU3RyaW5nKGlucHV0KVxuICB9XG5cbiAgdGhpcy5jcmVkZW50aWFscyA9IG9wdGlvbnMuY3JlZGVudGlhbHMgfHwgdGhpcy5jcmVkZW50aWFscyB8fCAnc2FtZS1vcmlnaW4nXG4gIGlmIChvcHRpb25zLmhlYWRlcnMgfHwgIXRoaXMuaGVhZGVycykge1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycylcbiAgfVxuICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJylcbiAgdGhpcy5tb2RlID0gb3B0aW9ucy5tb2RlIHx8IHRoaXMubW9kZSB8fCBudWxsXG4gIHRoaXMuc2lnbmFsID0gb3B0aW9ucy5zaWduYWwgfHwgdGhpcy5zaWduYWxcbiAgdGhpcy5yZWZlcnJlciA9IG51bGxcblxuICBpZiAoKHRoaXMubWV0aG9kID09PSAnR0VUJyB8fCB0aGlzLm1ldGhvZCA9PT0gJ0hFQUQnKSAmJiBib2R5KSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQm9keSBub3QgYWxsb3dlZCBmb3IgR0VUIG9yIEhFQUQgcmVxdWVzdHMnKVxuICB9XG4gIHRoaXMuX2luaXRCb2R5KGJvZHkpXG59XG5cblJlcXVlc3QucHJvdG90eXBlLmNsb25lID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLCB7Ym9keTogdGhpcy5fYm9keUluaXR9KVxufVxuXG5mdW5jdGlvbiBkZWNvZGUoYm9keSkge1xuICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpXG4gIGJvZHlcbiAgICAudHJpbSgpXG4gICAgLnNwbGl0KCcmJylcbiAgICAuZm9yRWFjaChmdW5jdGlvbihieXRlcykge1xuICAgICAgaWYgKGJ5dGVzKSB7XG4gICAgICAgIHZhciBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9JylcbiAgICAgICAgdmFyIG5hbWUgPSBzcGxpdC5zaGlmdCgpLnJlcGxhY2UoL1xcKy9nLCAnICcpXG4gICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKVxuICAgICAgICBmb3JtLmFwcGVuZChkZWNvZGVVUklDb21wb25lbnQobmFtZSksIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpXG4gICAgICB9XG4gICAgfSlcbiAgcmV0dXJuIGZvcm1cbn1cblxuZnVuY3Rpb24gcGFyc2VIZWFkZXJzKHJhd0hlYWRlcnMpIHtcbiAgdmFyIGhlYWRlcnMgPSBuZXcgSGVhZGVycygpXG4gIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgLy8gaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzcyMzAjc2VjdGlvbi0zLjJcbiAgdmFyIHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJylcbiAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xuICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKVxuICAgIHZhciBrZXkgPSBwYXJ0cy5zaGlmdCgpLnRyaW0oKVxuICAgIGlmIChrZXkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHBhcnRzLmpvaW4oJzonKS50cmltKClcbiAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpXG4gICAgfVxuICB9KVxuICByZXR1cm4gaGVhZGVyc1xufVxuXG5Cb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpXG5cbmV4cG9ydCBmdW5jdGlvbiBSZXNwb25zZShib2R5SW5pdCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge31cbiAgfVxuXG4gIHRoaXMudHlwZSA9ICdkZWZhdWx0J1xuICB0aGlzLnN0YXR1cyA9IG9wdGlvbnMuc3RhdHVzID09PSB1bmRlZmluZWQgPyAyMDAgOiBvcHRpb25zLnN0YXR1c1xuICB0aGlzLm9rID0gdGhpcy5zdGF0dXMgPj0gMjAwICYmIHRoaXMuc3RhdHVzIDwgMzAwXG4gIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJ1xuICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhvcHRpb25zLmhlYWRlcnMpXG4gIHRoaXMudXJsID0gb3B0aW9ucy51cmwgfHwgJydcbiAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpXG59XG5cbkJvZHkuY2FsbChSZXNwb25zZS5wcm90b3R5cGUpXG5cblJlc3BvbnNlLnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFJlc3BvbnNlKHRoaXMuX2JvZHlJbml0LCB7XG4gICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICBzdGF0dXNUZXh0OiB0aGlzLnN0YXR1c1RleHQsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKSxcbiAgICB1cmw6IHRoaXMudXJsXG4gIH0pXG59XG5cblJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XG4gIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pXG4gIHJlc3BvbnNlLnR5cGUgPSAnZXJyb3InXG4gIHJldHVybiByZXNwb25zZVxufVxuXG52YXIgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF1cblxuUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xuICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiBzdGF0dXMsIGhlYWRlcnM6IHtsb2NhdGlvbjogdXJsfX0pXG59XG5cbmV4cG9ydCB2YXIgRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb25cbnRyeSB7XG4gIG5ldyBET01FeGNlcHRpb24oKVxufSBjYXRjaCAoZXJyKSB7XG4gIERPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuICAgIHZhciBlcnJvciA9IEVycm9yKG1lc3NhZ2UpXG4gICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrXG4gIH1cbiAgRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKVxuICBET01FeGNlcHRpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRE9NRXhjZXB0aW9uXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaChpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdClcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4gcmVqZWN0KG5ldyBET01FeGNlcHRpb24oJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpKVxuICAgIH1cblxuICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuXG4gICAgZnVuY3Rpb24gYWJvcnRYaHIoKSB7XG4gICAgICB4aHIuYWJvcnQoKVxuICAgIH1cblxuICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvcHRpb25zID0ge1xuICAgICAgICBzdGF0dXM6IHhoci5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiBwYXJzZUhlYWRlcnMoeGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpIHx8ICcnKVxuICAgICAgfVxuICAgICAgb3B0aW9ucy51cmwgPSAncmVzcG9uc2VVUkwnIGluIHhociA/IHhoci5yZXNwb25zZVVSTCA6IG9wdGlvbnMuaGVhZGVycy5nZXQoJ1gtUmVxdWVzdC1VUkwnKVxuICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHRcbiAgICAgIHJlc29sdmUobmV3IFJlc3BvbnNlKGJvZHksIG9wdGlvbnMpKVxuICAgIH1cblxuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKVxuICAgIH1cblxuICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgVHlwZUVycm9yKCdOZXR3b3JrIHJlcXVlc3QgZmFpbGVkJykpXG4gICAgfVxuXG4gICAgeGhyLm9uYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJlamVjdChuZXcgRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSlcbiAgICB9XG5cbiAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpXG5cbiAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gdHJ1ZVxuICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2VcbiAgICB9XG5cbiAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICdibG9iJ1xuICAgIH1cblxuICAgIHJlcXVlc3QuaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihuYW1lLCB2YWx1ZSlcbiAgICB9KVxuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsKSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKVxuXG4gICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpXG4gIH0pXG59XG5cbmZldGNoLnBvbHlmaWxsID0gdHJ1ZVxuXG5pZiAoIXNlbGYuZmV0Y2gpIHtcbiAgc2VsZi5mZXRjaCA9IGZldGNoXG4gIHNlbGYuSGVhZGVycyA9IEhlYWRlcnNcbiAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdFxuICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2Vcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xuXG50cnkge1xuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XG4gIHJpdGVyWydyZXR1cm4nXSA9IGZ1bmN0aW9uICgpIHsgU0FGRV9DTE9TSU5HID0gdHJ1ZTsgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xuICBpZiAoIXNraXBDbG9zaW5nICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIHNhZmUgPSBmYWxzZTtcbiAgdHJ5IHtcbiAgICB2YXIgYXJyID0gWzddO1xuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcbiAgICBhcnJbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcjsgfTtcbiAgICBleGVjKGFycik7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gc2FmZTtcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8vIFRoaXMgbWV0aG9kIG9mIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdCBuZWVkcyB0byBiZVxuLy8ga2VwdCBpZGVudGljYWwgdG8gdGhlIHdheSBpdCBpcyBvYnRhaW5lZCBpbiBydW50aW1lLmpzXG52YXIgZyA9IChmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMgfHwgKHR5cGVvZiBzZWxmID09PSBcIm9iamVjdFwiICYmIHNlbGYpO1xufSkoKSB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG5cbi8vIFVzZSBgZ2V0T3duUHJvcGVydHlOYW1lc2AgYmVjYXVzZSBub3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgY2FsbGluZ1xuLy8gYGhhc093blByb3BlcnR5YCBvbiB0aGUgZ2xvYmFsIGBzZWxmYCBvYmplY3QgaW4gYSB3b3JrZXIuIFNlZSAjMTgzLlxudmFyIGhhZFJ1bnRpbWUgPSBnLnJlZ2VuZXJhdG9yUnVudGltZSAmJlxuICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhnKS5pbmRleE9mKFwicmVnZW5lcmF0b3JSdW50aW1lXCIpID49IDA7XG5cbi8vIFNhdmUgdGhlIG9sZCByZWdlbmVyYXRvclJ1bnRpbWUgaW4gY2FzZSBpdCBuZWVkcyB0byBiZSByZXN0b3JlZCBsYXRlci5cbnZhciBvbGRSdW50aW1lID0gaGFkUnVudGltZSAmJiBnLnJlZ2VuZXJhdG9yUnVudGltZTtcblxuLy8gRm9yY2UgcmVldmFsdXRhdGlvbiBvZiBydW50aW1lLmpzLlxuZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSB1bmRlZmluZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vcnVudGltZVwiKTtcblxuaWYgKGhhZFJ1bnRpbWUpIHtcbiAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgcnVudGltZS5cbiAgZy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBvbGRSdW50aW1lO1xufSBlbHNlIHtcbiAgLy8gUmVtb3ZlIHRoZSBnbG9iYWwgcHJvcGVydHkgYWRkZWQgYnkgcnVudGltZS5qcy5cbiAgdHJ5IHtcbiAgICBkZWxldGUgZy5yZWdlbmVyYXRvclJ1bnRpbWU7XG4gIH0gY2F0Y2goZSkge1xuICAgIGcucmVnZW5lcmF0b3JSdW50aW1lID0gdW5kZWZpbmVkO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbiEoZnVuY3Rpb24oZ2xvYmFsKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXG4gIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiID8gU3ltYm9sIDoge307XG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XG4gIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgXCJAQHRvU3RyaW5nVGFnXCI7XG5cbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcbiAgdmFyIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lO1xuICBpZiAocnVudGltZSkge1xuICAgIGlmIChpbk1vZHVsZSkge1xuICAgICAgLy8gSWYgcmVnZW5lcmF0b3JSdW50aW1lIGlzIGRlZmluZWQgZ2xvYmFsbHkgYW5kIHdlJ3JlIGluIGEgbW9kdWxlLFxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcbiAgICB9XG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBEZWZpbmUgdGhlIHJ1bnRpbWUgZ2xvYmFsbHkgKGFzIGV4cGVjdGVkIGJ5IGdlbmVyYXRlZCBjb2RlKSBhcyBlaXRoZXJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBydW50aW1lLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBydW50aW1lLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgR3BbdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JcIjtcblxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxuICAvLyBAQGl0ZXJhdG9yIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbiBpdC4gU29tZSBicm93c2VycycgaW1wbGVtZW50YXRpb25zIG9mIHRoZVxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWdlbmVyYXRvci9pc3N1ZXMvMjc0IGZvciBtb3JlIGRldGFpbHMuXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBHZW5lcmF0b3JdXCI7XG4gIH07XG5cbiAgZnVuY3Rpb24gcHVzaFRyeUVudHJ5KGxvY3MpIHtcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xuXG4gICAgaWYgKDEgaW4gbG9jcykge1xuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xuICAgIH1cblxuICAgIGlmICgyIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xuICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdO1xuICAgIH1cblxuICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHtcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XG4gICAgZGVsZXRlIHJlY29yZC5hcmc7XG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcbiAgICAvLyBvciBhIGZpbmFsbHkgYmxvY2spIGdpdmVzIHVzIGEgcGxhY2UgdG8gc3RvcmUgdmFsdWVzIHRocm93biBmcm9tXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XG4gICAgdHJ5TG9jc0xpc3QuZm9yRWFjaChwdXNoVHJ5RW50cnksIHRoaXMpO1xuICAgIHRoaXMucmVzZXQodHJ1ZSk7XG4gIH1cblxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcbn0pKFxuICAvLyBJbiBzbG9wcHkgbW9kZSwgdW5ib3VuZCBgdGhpc2AgcmVmZXJzIHRvIHRoZSBnbG9iYWwgb2JqZWN0LCBmYWxsYmFjayB0b1xuICAvLyBGdW5jdGlvbiBjb25zdHJ1Y3RvciBpZiB3ZSdyZSBpbiBnbG9iYWwgc3RyaWN0IG1vZGUuIFRoYXQgaXMgc2FkbHkgYSBmb3JtXG4gIC8vIG9mIGluZGlyZWN0IGV2YWwgd2hpY2ggdmlvbGF0ZXMgQ29udGVudCBTZWN1cml0eSBQb2xpY3kuXG4gIChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcyB8fCAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgJiYgc2VsZik7XG4gIH0pKCkgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpXG4pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIHZhciBpbk1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCI7XG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcbiAgaWYgKHJ1bnRpbWUpIHtcbiAgICBpZiAoaW5Nb2R1bGUpIHtcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXG4gICAgICBtb2R1bGUuZXhwb3J0cyA9IHJ1bnRpbWU7XG4gICAgfVxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcbiAgICAvLyBhbHJlYWR5IGRlZmluZWQgZ2xvYmFsbHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cbiAgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWUgPSBpbk1vZHVsZSA/IG1vZHVsZS5leHBvcnRzIDoge307XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgcnVudGltZS53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID1cbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XG4gICAgcmV0dXJuIGN0b3JcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxuICAgICAgICAvLyBkbyBpcyB0byBjaGVjayBpdHMgLm5hbWUgcHJvcGVydHkuXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxuICAgICAgOiBmYWxzZTtcbiAgfTtcblxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcbiAgICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdlbkZ1bi5fX3Byb3RvX18gPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcbiAgICAgIH1cbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcbiAgICAgICAgICAvLyByZXN1bHQgZm9yIHRoaXMgaXRlcmF0aW9uIHdpbGwgYmUgcmVqZWN0ZWQgd2l0aCB0aGUgc2FtZVxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxuICAgICAgICAgIC8vIHdoZW4gYW4gYXdhaXRlZCBQcm9taXNlIGlzIHJlamVjdGVkLiBUaGlzIGRpZmZlcmVuY2UgaW5cbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcbiAgICAgICAgICAvLyByZWplY3Rpb24gKHN3YWxsb3cgaXQgYW5kIGNvbnRpbnVlLCBtYW51YWxseSAudGhyb3cgaXQgYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcbiAgICAgICAgICAvLyByZWplY3Rpb24gcmVhc29uIG91dHNpZGUgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiwgc28gdGhlXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBydW50aW1lLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIHJ1bnRpbWUua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xufSkoXG4gIC8vIEluIHNsb3BweSBtb2RlLCB1bmJvdW5kIGB0aGlzYCByZWZlcnMgdG8gdGhlIGdsb2JhbCBvYmplY3QsIGZhbGxiYWNrIHRvXG4gIC8vIEZ1bmN0aW9uIGNvbnN0cnVjdG9yIGlmIHdlJ3JlIGluIGdsb2JhbCBzdHJpY3QgbW9kZS4gVGhhdCBpcyBzYWRseSBhIGZvcm1cbiAgLy8gb2YgaW5kaXJlY3QgZXZhbCB3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeS5cbiAgKGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpcyB9KSgpIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxuKTtcbiIsIi8vIDIyLjEuMy4zMSBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5pZiAoQXJyYXlQcm90b1tVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSByZXF1aXJlKCcuL19oaWRlJykoQXJyYXlQcm90bywgVU5TQ09QQUJMRVMsIHt9KTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcbn07XG4iLCJ2YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBnZXRLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpID0gMDtcbiAgdmFyIFA7XG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xuICByZXR1cm4gTztcbn07XG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXG4vLyB0cnVlICAtPiBBcnJheSNpbmNsdWRlc1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0lPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xuICAgICAgaWYgKE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgT2JqZWN0LmtleXMoTylcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcblxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiAka2V5cyh0b09iamVjdChpdCkpO1xuICB9O1xufSk7XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xudmFyICROdW1iZXIgPSBnbG9iYWxbTlVNQkVSXTtcbnZhciBCYXNlID0gJE51bWJlcjtcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xuLy8gT3BlcmEgfjEyIGhhcyBicm9rZW4gT2JqZWN0I3RvU3RyaW5nXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xuXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICB2YXIgaXQgPSB0b1ByaW1pdGl2ZShhcmd1bWVudCwgZmFsc2UpO1xuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XG4gICAgdmFyIGZpcnN0ID0gaXQuY2hhckNvZGVBdCgwKTtcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XG4gICAgICB0aGlyZCA9IGl0LmNoYXJDb2RlQXQoMik7XG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xuICAgICAgc3dpdGNoIChpdC5jaGFyQ29kZUF0KDEpKSB7XG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXG4gICAgICAgIGRlZmF1bHQ6IHJldHVybiAraXQ7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGNvZGUgPSBkaWdpdHMuY2hhckNvZGVBdChpKTtcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXG4gICAgICAgIGlmIChjb2RlIDwgNDggfHwgY29kZSA+IG1heENvZGUpIHJldHVybiBOYU47XG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcbiAgICB9XG4gIH0gcmV0dXJuICtpdDtcbn07XG5cbmlmICghJE51bWJlcignIDBvMScpIHx8ICEkTnVtYmVyKCcwYjEnKSB8fCAkTnVtYmVyKCcrMHgxJykpIHtcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xuICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxuICAgICAgJiYgKEJST0tFTl9DT0YgPyBmYWlscyhmdW5jdGlvbiAoKSB7IHByb3RvLnZhbHVlT2YuY2FsbCh0aGF0KTsgfSkgOiBjb2YodGhhdCkgIT0gTlVNQkVSKVxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xuICB9O1xuICBmb3IgKHZhciBrZXlzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUE4oQmFzZSkgOiAoXG4gICAgLy8gRVMzOlxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcbiAgICAvLyBFUzYgKGluIGNhc2UsIGlmIG1vZHVsZXMgd2l0aCBFUzYgTnVtYmVyIHN0YXRpY3MgcmVxdWlyZWQgYmVmb3JlKTpcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xuICApLnNwbGl0KCcsJyksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajsgaisrKSB7XG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcbiAgICB9XG4gIH1cbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkTnVtYmVyO1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcbn1cbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XG4gIHZhciBTID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICB2YXIgUDtcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcbiAgICBzZXRQcm90b3R5cGVPZih0aGF0LCBQKTtcbiAgfSByZXR1cm4gdGhhdDtcbn07XG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XG4gIGFuT2JqZWN0KE8pO1xuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xufTtcbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcbiAgICAgICAgYnVnZ3kgPSAhKHRlc3QgaW5zdGFuY2VvZiBBcnJheSk7XG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgICAgIGNoZWNrKE8sIHByb3RvKTtcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XG4gICAgICAgIHJldHVybiBPO1xuICAgICAgfTtcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxuICBjaGVjazogY2hlY2tcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xudmFyIHNwYWNlID0gJ1snICsgc3BhY2VzICsgJ10nO1xudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XG52YXIgcnRyaW0gPSBSZWdFeHAoc3BhY2UgKyBzcGFjZSArICcqJCcpO1xuXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xuICB2YXIgZXhwID0ge307XG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xuICB9KTtcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0UsICdTdHJpbmcnLCBleHApO1xufTtcblxuLy8gMSAtPiBTdHJpbmcjdHJpbUxlZnRcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxuLy8gMyAtPiBTdHJpbmcjdHJpbVxudmFyIHRyaW0gPSBleHBvcnRlci50cmltID0gZnVuY3Rpb24gKHN0cmluZywgVFlQRSkge1xuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xuICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gIHJldHVybiBzdHJpbmc7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAnXFx4MDlcXHgwQVxceDBCXFx4MENcXHgwRFxceDIwXFx4QTBcXHUxNjgwXFx1MTgwRVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDMnICtcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xuIiwiXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5ld3NBcGkge1xyXG4gIHN0YXRpYyBnZXQgQVBJX0tFWSgpIHtcclxuICAgIHJldHVybiAnN2U5MmMwNWM5OWU2NDViYWFjYjc1NjAxOTg4MDc2NDUnO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldCBVUkxfQUxMX1NPVVJDRVMoKSB7XHJcbiAgICByZXR1cm4gJ2h0dHBzOi8vbmV3c2FwaS5vcmcvdjEvc291cmNlcyc7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IFVSTF9TT1VSQ0UoKSB7XHJcbiAgICByZXR1cm4gJ2h0dHBzOi8vbmV3c2FwaS5vcmcvdjIvZXZlcnl0aGluZyc7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0IHJlcXVlc3RPcHRpb25zKCkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgbWV0aG9kOiAnR0VUJyxcclxuICAgICAgbW9kZTogJ2NvcnMnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ1gtQXBpLUtleSc6IHRoaXMuQVBJX0tFWSxcclxuICAgICAgfSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgYXN5bmMgaHR0cEdldEFsbFNvdXJjZXMoKSB7XHJcbiAgICBjb25zdCByZXNwb25jZSA9IGF3YWl0IGZldGNoKHRoaXMuVVJMX0FMTF9TT1VSQ0VTKTtcclxuXHJcbiAgICBpZiAocmVzcG9uY2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzcG9uY2UuanNvbigpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGh0dHBHZXRBcnRpY2xlc1NvdXJjZShpZFNvdXJjZSwgbnVtYmVyQXJ0aWNsZXMpIHtcclxuICAgIGNvbnN0IHF1ZXJ5VVJMID0gYCR7dGhpcy5VUkxfU09VUkNFfS8/c291cmNlcz0ke2lkU291cmNlfSZwYWdlU2l6ZT0ke251bWJlckFydGljbGVzfWA7XHJcbiAgICBjb25zdCByZXNwb25jZSA9IGF3YWl0IGZldGNoKHF1ZXJ5VVJMLCB0aGlzLnJlcXVlc3RPcHRpb25zKTtcclxuXHJcbiAgICBpZiAocmVzcG9uY2Uuc3RhdHVzICE9PSAyMDApIHtcclxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlc3BvbmNlKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzcG9uY2UuanNvbigpO1xyXG4gIH1cclxufVxyXG4iLCJcclxuZnVuY3Rpb24gY3JlYXRlTm9kZSh7XHJcbiAgdGFnTmFtZSwgaW5uZXJUZXh0LCBpbm5lckhUTUwsIGNsYXNzTmFtZSwgYXR0cnMsXHJcbn0pIHtcclxuICBjb25zdCBub2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcclxuXHJcbiAgaWYgKGNsYXNzTmFtZSkge1xyXG4gICAgbm9kZS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XHJcbiAgfVxyXG5cclxuICBpZiAoaW5uZXJUZXh0KSB7XHJcbiAgICBub2RlLmlubmVyVGV4dCA9IGlubmVyVGV4dDtcclxuICB9XHJcblxyXG4gIGlmIChpbm5lckhUTUwpIHtcclxuICAgIG5vZGUuaW5uZXJIVE1MID0gaW5uZXJIVE1MO1xyXG4gIH1cclxuXHJcbiAgaWYgKGF0dHJzKSB7XHJcbiAgICBPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaCgoYXR0cikgPT4ge1xyXG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShhdHRyLCBhdHRyc1thdHRyXSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG5cclxuICByZXR1cm4gbm9kZTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICBjcmVhdGVOb2RlLFxyXG59O1xyXG4iLCJpbXBvcnQgTmV3c0FwaSBmcm9tICcuLi8uLi9uZXdzLWFwaS9uZXdzLWFwaSc7XHJcbmltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tICcuLi8uLi91dGlscy9ub2RlLXV0aWwnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU291cmNlQ29udGVudCB7XHJcbiAgY29uc3RydWN0b3Iobm9kZVNlbGVjdG9yKSB7XHJcbiAgICB0aGlzLm5vZGVTb3VyY2VDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihub2RlU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5hcnRpY2xlc0NvbnRhaW5lciA9IG51bGw7XHJcbiAgfVxyXG5cclxuICBzZXQgYXJ0aWNsZXMoYXJ0aWNsZXMpIHtcclxuICAgIHRoaXMuYXJ0aWNsZXNDb250YWluZXIgPSBhcnRpY2xlcztcclxuICB9XHJcblxyXG4gIGNyZWF0ZUFydGljbGVzKCkge1xyXG4gICAgY29uc3QgZnJhZ21lbnRDb250YWluZXJBcnRpY2xlcyA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgIGNvbnN0IG5vZGVEaXYgPSBjcmVhdGVOb2RlKHtcclxuICAgICAgdGFnTmFtZTogJ2RpdicsXHJcbiAgICAgIGNsYXNzTmFtZTogJ3NvdXJjZS1jb250ZW50X19hcnRpY2xlcycsXHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmFydGljbGVzQ29udGFpbmVyLmZvckVhY2goKGFydGljbGUpID0+IHtcclxuICAgICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGFydGljbGUucHVibGlzaGVkQXQpLnRvTG9jYWxlU3RyaW5nKCk7XHJcbiAgICAgIGNvbnN0IGlubmVyaW1nID0gYXJ0aWNsZS51cmxUb0ltYWdlXHJcbiAgICAgICAgPyBgPGltZyBzcmM9XCIke2FydGljbGUudXJsVG9JbWFnZX1cIiB3aWR0aD1cIjE4MFwiIGhlaWdodD1cIjE0MFwiIGFsdD1cIkltYWdlIG5ld3NcIiBjbGFzcz1cInNvdXJjZS1hcnRpY2xlX19pbWdcIj5gXHJcbiAgICAgICAgOiAnPGRpdiBjbGFzcz1cInNvdXJjZS1hcnRpY2xlX19pbnN0ZWFkLWltZ1wiPjwvZGl2Pic7XHJcbiAgICAgIGNvbnN0IG5vZGVBcnRpY2xlID0gY3JlYXRlTm9kZSh7XHJcbiAgICAgICAgdGFnTmFtZTogJ2FydGljbGUnLFxyXG4gICAgICAgIGNsYXNzTmFtZTogJ3NvdXJjZS1hcnRpY2xlJyxcclxuICAgICAgICBpbm5lckhUTUw6IGBcclxuICAgICAgICAgICR7aW5uZXJpbWd9XHJcbiAgICAgICAgICA8aDMgY2xhc3M9XCJzb3VyY2UtYXJ0aWNsZV9fdGl0bGVcIj4ke2FydGljbGUudGl0bGV9PC9oMz5cclxuICAgICAgICAgIDxwIGNsYXNzPVwic291cmNlLWFydGljbGVfX2Rlc2NyaXB0aW9uXCI+JHthcnRpY2xlLmRlc2NyaXB0aW9ufTwvcD5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwic291cmNlLWFydGljbGVfX2RhdGVcIj4ke2RhdGV9PC9zcGFuPlxyXG4gICAgICAgICAgPGEgaHJlZj1cIiR7YXJ0aWNsZS51cmx9XCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJzb3VyY2UtYXJ0aWNsZV9fbGlua1wiPlNlZSBtb3JlPC9hPmAsXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgbm9kZURpdi5hcHBlbmRDaGlsZChub2RlQXJ0aWNsZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBmcmFnbWVudENvbnRhaW5lckFydGljbGVzLmFwcGVuZENoaWxkKG5vZGVEaXYpO1xyXG5cclxuICAgIHJldHVybiBmcmFnbWVudENvbnRhaW5lckFydGljbGVzO1xyXG4gIH1cclxuXHJcbiAgcmVkaXJlY3RBcnRpY2xlcyhpZFNvdXJjZSwgY291bnROZXdzKSB7XHJcbiAgICBjb25zdCBub2RlQXJ0aWNsZXMgPSB0aGlzLm5vZGVTb3VyY2VDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3VyY2UtY29udGVudF9fYXJ0aWNsZXMnKTtcclxuICAgIG5vZGVBcnRpY2xlcy5pbm5lckhUTUwgPSAnUGxlYXNlIHdhaXQuLi4nO1xyXG5cclxuICAgIE5ld3NBcGkuaHR0cEdldEFydGljbGVzU291cmNlKGlkU291cmNlLCBjb3VudE5ld3MpXHJcbiAgICAgIC50aGVuKCh7IGFydGljbGVzIH0pID0+IHtcclxuICAgICAgICB0aGlzLmFydGljbGVzID0gYXJ0aWNsZXM7XHJcbiAgICAgICAgdGhpcy52aWV3TmFtZVNvdXJjZUNvbnRlbnQoKTtcclxuICAgICAgICB0aGlzLnZpZXdBcnRpY2xlcygpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goKGVycm9yTWVzc2FnZSkgPT4ge1xyXG4gICAgICAgIG5vZGVBcnRpY2xlcy5pbm5lckhUTUwgPSAnJztcclxuICAgICAgICBhbGVydChgRXJyb3IuICR7ZXJyb3JNZXNzYWdlfWApO1xyXG4gICAgICB9KTtcclxuICB9XHJcblxyXG4gIHZpZXdBcnRpY2xlcygpIHtcclxuICAgIGNvbnN0IG5vZGVBcnRpY2xlcyA9IHRoaXMubm9kZVNvdXJjZUNvbnRlbnQucXVlcnlTZWxlY3RvcignLnNvdXJjZS1jb250ZW50X19hcnRpY2xlcycpO1xyXG4gICAgY29uc3QgZnJhZ21lbnRBcnRpY2xlcyA9IHRoaXMuY3JlYXRlQXJ0aWNsZXMoKTtcclxuXHJcbiAgICBub2RlQXJ0aWNsZXMucmVwbGFjZVdpdGgoZnJhZ21lbnRBcnRpY2xlcyk7XHJcbiAgfVxyXG5cclxuICB2aWV3TmFtZVNvdXJjZUNvbnRlbnQoKSB7XHJcbiAgICBjb25zdCBub2RlTmFtZVNvdXJjZUNvbnRlbnQgPSB0aGlzLm5vZGVTb3VyY2VDb250ZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3VyY2UtY29udGVudF9fYXV0aG9yJyk7XHJcbiAgICBub2RlTmFtZVNvdXJjZUNvbnRlbnQuaW5uZXJUZXh0ID0gdGhpcy5hcnRpY2xlc0NvbnRhaW5lclswXS5zb3VyY2UubmFtZTtcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0ICogYXMgRXZlbnRIYW5kbGVycyBmcm9tICcuL2V2ZW50cy1maWx0ZXItc291cmNlcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGaWx0ZXJTb3VyY2VzIHtcclxuICBjb25zdHJ1Y3Rvcihub2RlU2VsZWN0b3IpIHtcclxuICAgIHRoaXMubm9kZUZpbHRlclNvdXJjZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5vZGVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLmNvdW50TmV3cyA9IHRoaXMuY291bnROZXdzO1xyXG5cclxuICAgIHRoaXMubm9kZUZpbHRlclNvdXJjZXMucXVlcnlTZWxlY3RvcignLmZpbHRlci1zb3VyY2VzX19yYW5nZScpXHJcbiAgICAgIC5vbmNoYW5nZSA9IEV2ZW50SGFuZGxlcnMuaGFuZGxlckNoYW5nZVJhbmdlLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBzZXQgY291bnROZXdzKGNvdW50TmV3cykge1xyXG4gICAgY29uc3Qgbm9kZUZpbHRlclNvdXJjZXNWYWx1ZSA9IHRoaXMubm9kZUZpbHRlclNvdXJjZXNcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXItc291cmNlc19fdmFsdWUnKTtcclxuXHJcbiAgICBub2RlRmlsdGVyU291cmNlc1ZhbHVlLmlubmVyVGV4dCA9IGNvdW50TmV3cztcclxuICB9XHJcblxyXG4gIGdldCBjb3VudE5ld3MoKSB7XHJcbiAgICBjb25zdCBjb3VudCA9IHRoaXMubm9kZUZpbHRlclNvdXJjZXNcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXItc291cmNlc19fcmFuZ2UnKS52YWx1ZTtcclxuICAgIHJldHVybiBOdW1iZXIoY291bnQpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgU291cmNlQ29udGVudCBmcm9tICcuLi9zb3VyY2UtY29udGVudC9zb3VyY2UtY29udGVudCc7XHJcbmltcG9ydCBBbGxTb3VyY2VzIGZyb20gJy4uL2FsbC1zb3VyY2VzL2FsbC1zb3VyY2VzJztcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZXJDaGFuZ2VSYW5nZShldmVudCkge1xyXG4gIHRoaXMuY291bnROZXdzID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xyXG5cclxuICBjb25zdCBzb3VyY2VDb250ZW50ID0gbmV3IFNvdXJjZUNvbnRlbnQoJy5zb3VyY2UtY29udGVudCcpO1xyXG4gIGNvbnN0IHsgaWRDdXJyZW50U291cmNlIH0gPSBuZXcgQWxsU291cmNlcygnLmFsbC1zb3VyY2VzJyk7XHJcblxyXG4gIHNvdXJjZUNvbnRlbnQucmVkaXJlY3RBcnRpY2xlcyhpZEN1cnJlbnRTb3VyY2UsIHRoaXMuY291bnROZXdzKTtcclxufVxyXG5cclxuZXhwb3J0IHtcclxuICBoYW5kbGVyQ2hhbmdlUmFuZ2UsXHJcbn07XHJcbiIsImltcG9ydCB7IGNyZWF0ZU5vZGUgfSBmcm9tICcuLi8uLi91dGlscy9ub2RlLXV0aWwnO1xyXG5pbXBvcnQgKiBhcyBFdmVudEhhbmRsZXJzIGZyb20gJy4vZXZlbnRzLWFsbC1zb3VyY2VzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFsbFNvdXJjZXMge1xyXG4gIHN0YXRpYyBnZXQgTkFNRV9DTEFTU19DVVJFTlRfTk9ERSgpIHtcclxuICAgIHJldHVybiAnYWxsLXNvdXJjZXNfX2N1cmVudC1pdGVtJztcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXQgREFUQV9JRF9TT1VSQ0UoKSB7XHJcbiAgICByZXR1cm4gJ2RhdGEtaWQtc291cmNlJztcclxuICB9XHJcblxyXG4gIGNvbnN0cnVjdG9yKG5vZGVTZWxlY3Rvcikge1xyXG4gICAgdGhpcy5ub2RlU291cmNlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iobm9kZVNlbGVjdG9yKTtcclxuICAgIHRoaXMuc291cmNlc0NvbnRhaW5lciA9IG51bGw7XHJcbiAgICB0aGlzLmN1cmVudE5vZGUgPSBudWxsO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iobm9kZVNlbGVjdG9yKVxyXG4gICAgICAub25jbGljayA9IEV2ZW50SGFuZGxlcnMuaGFuZGxlckNsaWNrLmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBzZXQgc291cmNlcyhzb3VyY2VzKSB7XHJcbiAgICB0aGlzLnNvdXJjZXNDb250YWluZXIgPSBzb3VyY2VzO1xyXG4gIH1cclxuXHJcbiAgc2V0IGNsaWNrQ3VyZW50Tm9kZShjdXJlbnROb2RlKSB7XHJcbiAgICBpZiAodGhpcy5jdXJlbnROb2RlKSB7XHJcbiAgICAgIHRoaXMuY3VyZW50Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKEFsbFNvdXJjZXMuTkFNRV9DTEFTU19DVVJFTlRfTk9ERSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmN1cmVudE5vZGUgPSBjdXJlbnROb2RlO1xyXG4gICAgdGhpcy5jdXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoQWxsU291cmNlcy5OQU1FX0NMQVNTX0NVUkVOVF9OT0RFKTtcclxuICB9XHJcblxyXG4gIGdldCBpZEN1cnJlbnRTb3VyY2UoKSB7XHJcbiAgICBjb25zdCBjdXJyZW50Tm9kZSA9IHRoaXMubm9kZVNvdXJjZXNcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoYC4ke0FsbFNvdXJjZXMuTkFNRV9DTEFTU19DVVJFTlRfTk9ERX1gKTtcclxuXHJcbiAgICByZXR1cm4gY3VycmVudE5vZGUuZ2V0QXR0cmlidXRlKEFsbFNvdXJjZXMuREFUQV9JRF9TT1VSQ0UpO1xyXG4gIH1cclxuXHJcbiAgY3JlYXRlU291cmNlcygpIHtcclxuICAgIGNvbnN0IGZyYWdtZW50Q29udGFpbmVyTGlzdCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICB0aGlzLnNvdXJjZXNDb250YWluZXIuZm9yRWFjaCgoc291cmNlKSA9PiB7XHJcbiAgICAgIGNvbnN0IG5vZGVMSSA9IGNyZWF0ZU5vZGUoe1xyXG4gICAgICAgIHRhZ05hbWU6ICdsaScsXHJcbiAgICAgICAgaW5uZXJUZXh0OiBzb3VyY2UubmFtZSxcclxuICAgICAgICBjbGFzc05hbWU6ICdhbGwtc291cmNlc19faXRlbScsXHJcbiAgICAgICAgYXR0cnM6IHsgW0FsbFNvdXJjZXMuREFUQV9JRF9TT1VSQ0VdOiBzb3VyY2UuaWQgfSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBmcmFnbWVudENvbnRhaW5lckxpc3QuYXBwZW5kQ2hpbGQobm9kZUxJKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBmcmFnbWVudENvbnRhaW5lckxpc3Q7XHJcbiAgfVxyXG5cclxuICB2aWV3U291cmNlcygpIHtcclxuICAgIGNvbnN0IGZyYWdtZW50U291cmNlcyA9IHRoaXMuY3JlYXRlU291cmNlcygpO1xyXG4gICAgdGhpcy5ub2RlU291cmNlcy5hcHBlbmRDaGlsZChmcmFnbWVudFNvdXJjZXMpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgU291cmNlQ29udGVudCBmcm9tICcuLi9zb3VyY2UtY29udGVudC9zb3VyY2UtY29udGVudCc7XHJcbmltcG9ydCBGaWx0ZXJTb3VyY2VzIGZyb20gJy4uL2ZpbHRlci1zb3VyY2VzL2ZpbHRlci1zb3VyY2VzJztcclxuXHJcbmZ1bmN0aW9uIGhhbmRsZXJDbGljayhldmVudCkge1xyXG4gIGNvbnN0IGNsaWNrRWxlbSA9IGV2ZW50LnRhcmdldDtcclxuXHJcbiAgaWYgKGNsaWNrRWxlbS50YWdOYW1lID09PSAnTEknKSB7XHJcbiAgICBjb25zdCBpZFNvdXJjZSA9IGNsaWNrRWxlbS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaWQtc291cmNlJyk7XHJcbiAgICBjb25zdCB7IGNvdW50TmV3cyB9ID0gbmV3IEZpbHRlclNvdXJjZXMoJy5maWx0ZXItc291cmNlcycpO1xyXG4gICAgY29uc3Qgc291cmNlQ29udGVudCA9IG5ldyBTb3VyY2VDb250ZW50KCcuc291cmNlLWNvbnRlbnQnKTtcclxuXHJcbiAgICB0aGlzLmNsaWNrQ3VyZW50Tm9kZSA9IGNsaWNrRWxlbTtcclxuICAgIHNvdXJjZUNvbnRlbnQucmVkaXJlY3RBcnRpY2xlcyhpZFNvdXJjZSwgY291bnROZXdzKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7XHJcbiAgaGFuZGxlckNsaWNrLFxyXG59O1xyXG4iLCJpbXBvcnQgTmV3c0FwaSBmcm9tICcuL25ld3MtYXBpL25ld3MtYXBpJztcclxuaW1wb3J0IEFsbFNvdXJjZXMgZnJvbSAnLi9jb21wb25lbnRzL2FsbC1zb3VyY2VzL2FsbC1zb3VyY2VzJztcclxuaW1wb3J0IFNvdXJjZUNvbnRlbnQgZnJvbSAnLi9jb21wb25lbnRzL3NvdXJjZS1jb250ZW50L3NvdXJjZS1jb250ZW50JztcclxuaW1wb3J0IEZpbHRlclNvdXJjZXMgZnJvbSAnLi9jb21wb25lbnRzL2ZpbHRlci1zb3VyY2VzL2ZpbHRlci1zb3VyY2VzJztcclxuXHJcbk5ld3NBcGkuaHR0cEdldEFsbFNvdXJjZXMoKVxyXG4gIC50aGVuKCh7IHNvdXJjZXMgfSkgPT4ge1xyXG4gICAgaWYgKCFzb3VyY2VzKSB7XHJcbiAgICAgIFByb21pc2UucmVqZWN0KHNvdXJjZXMpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYWxsU291cmNlcyA9IG5ldyBBbGxTb3VyY2VzKCcuYWxsLXNvdXJjZXNfX2xpc3QnKTtcclxuICAgIGNvbnN0IHNvdXJjZUNvbnRlbnQgPSBuZXcgU291cmNlQ29udGVudCgnLnNvdXJjZS1jb250ZW50Jyk7XHJcbiAgICBjb25zdCB7IGNvdW50TmV3cyB9ID0gbmV3IEZpbHRlclNvdXJjZXMoJy5maWx0ZXItc291cmNlcycpO1xyXG5cclxuICAgIGFsbFNvdXJjZXMuc291cmNlcyA9IHNvdXJjZXM7XHJcbiAgICBhbGxTb3VyY2VzLnZpZXdTb3VyY2VzKCk7XHJcbiAgICBhbGxTb3VyY2VzLmNsaWNrQ3VyZW50Tm9kZSA9IGFsbFNvdXJjZXMubm9kZVNvdXJjZXMuZmlyc3RFbGVtZW50Q2hpbGQ7XHJcbiAgICBzb3VyY2VDb250ZW50LnJlZGlyZWN0QXJ0aWNsZXMoc291cmNlc1swXS5pZCwgY291bnROZXdzKTtcclxuICB9KVxyXG4gIC5jYXRjaCgoZXJyb3JNZXNzYWdlKSA9PiB7XHJcbiAgICBhbGVydChgRXJyb3IuICR7ZXJyb3JNZXNzYWdlfWApO1xyXG4gIH0pO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9