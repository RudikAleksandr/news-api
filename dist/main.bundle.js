!function(e){var t={};function n(r){if(t[r])return t[r].exports;var c=t[r]={i:r,l:!1,exports:{}};return e[r].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var c in e)n.d(r,c,function(t){return e[t]}.bind(null,c));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}e.exports=function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}},function(e,t){e.exports=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}},function(e,t){e.exports=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},function(e,t,n){"use strict";n.r(t);var r=n(1),c=n.n(r),o=n(0),i=n.n(o),u=function(){function e(){c()(this,e)}return i()(e,null,[{key:"httpGetAllSources",value:function(){return fetch(this.URL_ALL_SOURCES).then(function(e){return 200!==e.status?Promise.reject(e):e.json()}).catch(function(e){var t=e.statusText;return Promise.reject(t)})}},{key:"httpGetArticlesSource",value:function(e,t){var n="".concat(this.URL_SOURCE,"/?sources=").concat(e,"&pageSize=").concat(t);return fetch(n,this.requestOptions).then(function(e){return 200!==e.status?Promise.reject(e):e.json()}).catch(function(e){var t=e.statusText;return Promise.reject(t)})}},{key:"API_KEY",get:function(){return"7e92c05c99e645baacb7560198807645"}},{key:"URL_ALL_SOURCES",get:function(){return"https://newsapi.org/v1/sources"}},{key:"URL_SOURCE",get:function(){return"https://newsapi.org/v2/everything"}},{key:"requestOptions",get:function(){return{method:"GET",mode:"cors",headers:{"X-Api-Key":this.API_KEY}}}}]),e}(),s=n(2),a=n.n(s);function l(e){var t=e.tagName,n=e.innerText,r=e.innerHTML,c=e.className,o=e.attrs,i=document.createElement(t);return c&&i.classList.add(c),n&&(i.innerText=n),r&&(i.innerHTML=r),o&&Object.keys(o).forEach(function(e){i.setAttribute(e,o[e])}),i}var f=function(){function e(t){c()(this,e),this.nodeSourceContent=document.querySelector(t),this.articlesContainer=null}return i()(e,[{key:"createArticles",value:function(){var e=new DocumentFragment,t=l({tagName:"div",className:"source-content__articles"});return this.articlesContainer.forEach(function(e){var n=new Date(e.publishedAt).toLocaleString(),r=e.urlToImage?'<img src="'.concat(e.urlToImage,'" width="180" height="140" alt="Image news" class="source-article__img">'):'<div class="source-article__instead-img"></div>',c=l({tagName:"article",className:"source-article",innerHTML:"\n          ".concat(r,'\n          <h3 class="source-article__title">').concat(e.title,'</h3>\n          <p class="source-article__description">').concat(e.description,'</p>\n          <span class="source-article__date">').concat(n,'</span>\n          <a href="').concat(e.url,'" target="_blank" class="source-article__link">See more</a>')});t.appendChild(c)}),e.appendChild(t),e}},{key:"redirectArticles",value:function(e,t){var n=this,r=this.nodeSourceContent.querySelector(".source-content__articles");r.innerHTML="Please wait...",u.httpGetArticlesSource(e,t).then(function(e){var t=e.articles;n.articles=t,n.viewNameSourceContent(),n.viewArticles()}).catch(function(e){r.innerHTML="",alert("Error. ".concat(e))})}},{key:"viewArticles",value:function(){var e=this.nodeSourceContent.querySelector(".source-content__articles"),t=this.createArticles();e.replaceWith(t)}},{key:"viewNameSourceContent",value:function(){this.nodeSourceContent.querySelector(".source-content__author").innerText=this.articlesContainer[0].source.name}},{key:"articles",set:function(e){this.articlesContainer=e}}]),e}();var d=function(){function e(t){c()(this,e),this.nodeFilterSources=document.querySelector(t),this.countNews=this.countNews,this.nodeFilterSources.querySelector(".filter-sources__range").onchange=function(e){this.countNews=e.target.value;var t=new f(".source-content"),n=new h(".all-sources").idCurrentSource;t.redirectArticles(n,this.countNews)}.bind(this)}return i()(e,[{key:"countNews",set:function(e){this.nodeFilterSources.querySelector(".filter-sources__value").innerText=e},get:function(){var e=this.nodeFilterSources.querySelector(".filter-sources__range").value;return Number(e)}}]),e}();var h=function(){function e(t){c()(this,e),this.nodeSources=document.querySelector(t),this.sourcesContainer=null,this.curentNode=null,document.querySelector(t).onclick=function(e){var t=e.target;if("LI"===t.tagName){var n=t.getAttribute("data-id-source"),r=new d(".filter-sources").countNews,c=new f(".source-content");this.clickCurentNode=t,c.redirectArticles(n,r)}}.bind(this)}return i()(e,null,[{key:"NAME_CLASS_CURENT_NODE",get:function(){return"all-sources__curent-item"}},{key:"DATA_ID_SOURCE",get:function(){return"data-id-source"}}]),i()(e,[{key:"createSources",value:function(){var t=new DocumentFragment;return this.sourcesContainer.forEach(function(n){var r=l({tagName:"li",innerText:n.name,className:"all-sources__item",attrs:a()({},e.DATA_ID_SOURCE,n.id)});t.appendChild(r)}),t}},{key:"viewSources",value:function(){var e=this.createSources();this.nodeSources.appendChild(e)}},{key:"sources",set:function(e){this.sourcesContainer=e}},{key:"clickCurentNode",set:function(t){this.curentNode&&this.curentNode.classList.remove(e.NAME_CLASS_CURENT_NODE),this.curentNode=t,this.curentNode.classList.add(e.NAME_CLASS_CURENT_NODE)}},{key:"idCurrentSource",get:function(){return this.nodeSources.querySelector(".".concat(e.NAME_CLASS_CURENT_NODE)).getAttribute(e.DATA_ID_SOURCE)}}]),e}();u.httpGetAllSources().then(function(e){var t=e.sources;t||Promise.reject(t);var n=new h(".all-sources__list"),r=new f(".source-content"),c=new d(".filter-sources").countNews;n.sources=t,n.viewSources(),n.clickCurentNode=n.nodeSources.firstElementChild,r.redirectArticles(t[0].id,c)}).catch(function(e){alert("Error. ".concat(e))})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,